

@inject PrizeRepository  _PrizeRepository
@inject IDialogService DialogService


<MudDropContainer  T="Prize" Items="Prizes" DraggingClass="mud-alert-text-warning" ItemDraggingClass="mud-alert-text-warning" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" NoDropClass="mud-border-error" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        <MudDropZone T="Prize" OnlyZone="IsDisable" Identifier="Not Active" DraggingClass="mud-alert-text-info" ItemDraggingClass="mud-alert-text-info" Class="rounded-lg mud-alert-text-dark border-2 border-dashed mud-border-lines-default pa-6 ma-8">
            <MudText Typo="Typo.h6" Class="mb-4">奖品池</MudText>
        </MudDropZone>
        <MudDropZone T="Prize" OnlyZone="IsDisable" Identifier="Active" Class="rounded-lg mud-alert-text-success border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1">
            <MudText Typo="Typo.h6" Class="mb-4">参与活动奖品</MudText>
        </MudDropZone>
    </ChildContent>
    <ItemRenderer>
        <div class="mud-elevation-25 pa-4 my-4">@context.Name</div>
    </ItemRenderer>
</MudDropContainer>



@code {


  
    [Parameter]
    public EventCallback<ActivityPrize> AddOptionCallback { set; get; }

    [Parameter]
    public EventCallback<ActivityPrize> RemoveOptionCallback { set; get; }

    private IEnumerable<Prize> Prizes = new List<Prize>();
    
    [Parameter]
    public ICollection<ActivityPrize> ActivityPrizes { set; get; }

    [Parameter]
    public bool IsDisable { set; get; }

    protected override async Task OnInitializedAsync()
    {
        Prizes = await _PrizeRepository.FindAsync(f => f.IsActive == true);
        if (ActivityPrizes is not null && Prizes.Any())
        {
            Parallel.ForEach(Prizes, prize =>
            {
                prize.Identifier = "Not Active";
            });
            var list = ActivityPrizes.ToList();
            for (int i = 0; i < list.Count; i++)
            {
               var prize= Prizes.FirstOrDefault(f => f.Name == list[i].Name);
                if (prize is not null)
                {
                    prize.Identifier = "Active";
                }
            }
        }
    }

    private async Task  ItemUpdated(MudItemDropInfo<Prize> dropItem)
    {
        
        DialogOptions dialogOptions = new() { CloseButton =true ,FullWidth = true,MaxWidth = MaxWidth.Small};
        var activityprize = GlobalUtility.MapperToActivityPrize(dropItem.Item);
        if (dropItem.DropzoneIdentifier == "Active")
        {
           // visible = true;
            var resultdialog = await DialogService.ShowAsync<EditPrizeCountDialog>("Confirm", dialogOptions);
            var result = await resultdialog.Result;
            if (!result.Canceled)
            {
                activityprize.Amount = (int)result.Data;
                //添加中奖号码
                activityprize.UniqueNumber = await GlobalUtility.GetRandomInt(activityprize.Probability);
                dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
                await AddOptionCallback.InvokeAsync(activityprize);
            }
            else
            {
                dropItem.Item.Identifier = "Not Active"; //dropItem.DropzoneIdentifier;
            }
        }
        if (dropItem.DropzoneIdentifier == "Not Active")
        {
            await RemoveOptionCallback.InvokeAsync(activityprize);
        }
    }
}
