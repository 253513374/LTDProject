@page "/"
@using Radzen.Blazor
@using Radzen

@using ScanCode.Model.Dto


@inject LotteryRecordRepository _LotteryRecordRepository
@inject WLabelStorageRepository _WLabelStorageRepository
@inject OutStorageRepository _outStorageRepository
@inject RedPacketRecordRepository _redPacketRecordRepository
@inject IMemoryCache _Cache
@inject ILogger<Index> _logger
@inject IDialogService DialogService

<MudPageTitle Title="数据面板" Description="系统数据分析统计"></MudPageTitle>



<MudGrid  >
     <MudItem xs="12" sm="3"  >
        <MudPaper Elevation="1" Class="pa-5" Height="120px" >
            <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Outlined.ShoppingCartCheckout" Style="width: 48px; height: 48px;" Color="Color.Primary"></MudIcon>
                <MudStack Justify="Justify.FlexStart" Spacing="0">
                    <MudText Typo="Typo.caption" Class="mud-text-secondary ">今日出货量</MudText>
                    <MudText Typo="Typo.h6">@OutStorageCount</MudText>
                </MudStack>
            </MudStack>
        </MudPaper>

    </MudItem>
    <MudItem xs="12" sm="3">

        <MudPaper Elevation="1" Class="pa-5" Height="120px">
            <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Outlined.Warehouse" Color="Color.Primary" Style="width: 48px; height: 48px;"></MudIcon>
                <MudStack Justify="Justify.FlexStart" Spacing="0">
                    <MudText Typo="Typo.caption" Class="mud-text-secondary mb-n1">今年出货量</MudText>
                    <MudText Typo="Typo.h6">@OutStorageThisYearCount</MudText>
                </MudStack>
            </MudStack>
        </MudPaper>

    </MudItem>

      <MudItem xs="12" sm="3">

        <MudPaper Elevation="1" Class="pa-5" Height="120px">
            <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Outlined.DocumentScanner" Color="Color.Primary" Style="width:48px; height: 48px;"></MudIcon>
                <MudStack Justify="Justify.FlexStart" Spacing="0">
                    <MudText Typo="Typo.caption" Class="mud-text-secondary mb-n1">总订单量(@FormsNever.RadzenChartTitleText)</MudText>
                    <MudText Typo="Typo.h6">@FormsNever.OrderCount</MudText>
                </MudStack>
            </MudStack>
        </MudPaper>

    </MudItem>
      <MudItem xs="12" sm="3">

        <MudPaper Elevation="1" Class="pa-5" Height="120px">

            <MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                <MudIcon Icon="@Icons.Material.Outlined.HouseSiding" Color="Color.Primary" Style="width: 48px; height: 48px;"></MudIcon>
                <MudStack Justify="Justify.FlexStart" Spacing="0">
                    <MudText Typo="Typo.caption" Class="mud-text-secondary mb-n1">总出货量(@FormsNever.RadzenChartTitleText)</MudText>
                    <MudText Typo="Typo.h6">@FormsNever.AllYearCount</MudText>
                </MudStack>
            </MudStack>
        </MudPaper>



    </MudItem>
</MudGrid>


<MudPaper Class="pa-5 mt-5">
    <MudGrid  Spacing="3" Style="align-items:center;justify-content:center">
        <MudItem xs="12" sm="12" md="5" Style="align-items:center">
            <MudPaper Elevation="0" Style="align-items:center;justify-content:center;display:flex">
                <MudStack Row="true" Spacing="5" AlignItems="AlignItems.Start">
                    <MudIcon Style="Width: 48px; height: 48px;" Icon="@Icons.Material.Outlined.ViewCarousel" Color="Color.Primary"></MudIcon>

                    <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.caption" Align="Align.Center">红包数量</MudText>
                        <MudText Typo="Typo.h6" Align="Align.Center">@RedPacketCount </MudText>
                    </MudStack>

                    <MudStack Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.caption" Align="Align.Center">发放金额 </MudText>
                        <MudText Typo="Typo.h6" Align="Align.Center">@TotalAmountSum </MudText>
                    </MudStack>

                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="7">
            <MudTable Elevation="0" Items="@RedPacketRankings" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>操作</MudTh>
                    <MudTh>微信OpenID</MudTh>
                    <MudTh>手机号</MudTh>
                    <MudTh>总金额(元)</MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="操作">
                        <MudButton OnClick="@(() => OnViewDetails(context.OpenId,context.PhoneNumber))" Size="Size.Small" Color="Color.Tertiary" Variant="Variant.Text">详细</MudButton>
                    </MudTd>
                    <MudTd DataLabel="微信OpenID">@context.OpenId</MudTd>
                    <MudTd DataLabel="手机号">@context.PhoneNumber</MudTd>
                    <MudTd DataLabel="总金额(元)">@context.TotalAmount</MudTd>

                </RowTemplate>
            </MudTable>

        </MudItem>
    </MudGrid>


</MudPaper>

<MudStack Class="my-12 ">
    @if (isgetyear)
    {
        <MudCard Elevation="1" >
            <MudCardHeader>
                <MudText Typo="Typo.h6">销量分析图表(@FormsNever.RadzenChartTitleText ) </MudText>
            </MudCardHeader>
           
            <MudCardContent>
                <MudPaper Elevation="0" Class="w-100 mb-4">
                    <MudStack Row="true">
                        <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                        <RadzenLabel Text="平滑" For="smooth" Style="margin-right: 1rem;"/>
                        <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                        <RadzenLabel Text="数据标签" For="dataLabels"/>
                    </MudStack>
                </MudPaper>
                <RadzenChart >
                    <RadzenAreaSeries Stroke="rgb(49, 4, 170)" Fill="rgba(49, 4, 170,.5)"
                        Smooth="@smooth" Data="@FormsNever.GroupByYearCounts" Title="年总销量" LineType="LineType.Solid"
                                      CategoryProperty="Year" ValueProperty="Count" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                        <RadzenGridLines Visible="true"/>
                        <RadzenLegend Position="LegendPosition.Top"/>
                    </RadzenAreaSeries>
                </RadzenChart>
            </MudCardContent>
        </MudCard>

        <MudCard Elevation="1" >
            <MudCardHeader>
                <MudText Typo="Typo.h6"> 订单分析图表(@FormsNever.RadzenChartTitleText ) </MudText>
            </MudCardHeader>
           
            <MudCardContent>
                <MudPaper Elevation="0" Class="w-100 mb-4">
                    <MudStack Row="true">
                        <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                        <RadzenLabel Text="平滑" For="smooth" Style="margin-right: 1rem;"/>
                        <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels">234234234234234</RadzenCheckBox>
                        <RadzenLabel Text="数据标签" For="dataLabels"/>
                    </MudStack>
                </MudPaper>
                <RadzenChart>
                    <RadzenAreaSeries Stroke="rgb(49, 4, 170)" Fill="rgba(49, 4, 170,.5)"
                        Smooth="@smooth" Data="@FormsNever.GroupByOrderCounts"
                                      CategoryProperty="Year" ValueProperty="Count" StrokeWidth="3"
                                      LineType="LineType.Dotted" Title="订单总量">
                        <RadzenSeriesDataLabels Visible="@showDataLabels"/>
                        <RadzenGridLines Visible="true"/>
                        <RadzenLegend Position="LegendPosition.Top"/>
                    </RadzenAreaSeries>
                </RadzenChart>
            </MudCardContent>

            
        </MudCard>
    }
    else
    {
        <MudSkeletonComponent></MudSkeletonComponent>
    }
</MudStack>



@code
{


    private bool isgetyear = false;
    private bool isgetorder = false;

    /// <summary>
    /// 今年出库数量
    /// </summary>
    private int OutStorageThisYearCount;

    /// <summary>
    /// 今日出库数量
    /// </summary>
    private int OutStorageCount;

    /// <summary>
    /// 中奖数量
    /// </summary>
    private int LotteryWinCount;

    /// <summary>
    /// 抽奖数量
    /// </summary>
    private int LotteryCount;


    /// <summary>
    /// 红包发放数量
    /// </summary>
    private int RedPacketCount;

    /// <summary>
    /// 红包发放金额
    /// </summary>
    private double TotalAmountSum;

    bool smooth = true;
    bool showDataLabels = true;
    private readonly object _cacheLock = new object();


    [CascadingParameter]
    private HubConnection hubConnection { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> auTask { get; set; }

    private ReportFormsNever FormsNever = new();

    [Inject] private AccountService Service { get; set; }


    [Inject]
    private IRedisCache RedisCache { get; set; }


    List<RedPacketRankingDto> RedPacketRankings; 


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        try
        {
            if (auTask.Result.User is not null)
            {
                var claims = auTask.Result.User.Claims.ToList();
                var token = Service.GenerateJwtToken(claims);
                hubConnection = hubConnection.TryInitialize(_navigationManager, token);

                hubConnection.On<bool>(HubClientMethods.OnOutStorageDayCount, (bit) =>
                {

                    if (bit)
                    {
                        Interlocked.Increment(ref OutStorageCount);
                    }
                    else
                    {
                        Interlocked.Decrement(ref OutStorageCount);
                    }

                    InvokeAsync(StateHasChanged);
                });
                hubConnection.On<int>(HubClientMethods.OnRedPackedCount, (count) =>
                {
                    RedPacketCount = Interlocked.Increment(ref RedPacketCount);
                    InvokeAsync(StateHasChanged);
                });
                hubConnection.On<int>(HubClientMethods.OnRedpacketTotalAmount, (count) =>
                {
                    TotalAmountSum += (count / 100);
                    InvokeAsync(StateHasChanged);
                });
                hubConnection.On<int>(HubClientMethods.OnLotteryCount, (count) =>
                {
                    LotteryCount = Interlocked.Increment(ref LotteryCount);
                    InvokeAsync(StateHasChanged);
                });
                hubConnection.On<int>(HubClientMethods.OnLotteryWinCount, (count) =>
                {
                    //中奖人数
                    LotteryWinCount = Interlocked.Increment(ref LotteryWinCount);
                    InvokeAsync(StateHasChanged);
                });
                await hubConnection.StartAsync();
            }

        }
        catch (Exception ex)
        {
            _logger.LogError(ex.StackTrace);
            // throw;
        }


        await GetDataAsync();
    }


    //加载数据
    private  async Task GetDataAsync()
    {
        var cacheKey = $"ReportFormsNever{DateTime.Now.Year}";


        RedPacketRankings = await _redPacketRecordRepository.GetRedPacketRankingsAsync();


        FormsNever = await RedisCache.GetObjectAsync<ReportFormsNever>(cacheKey);

        if (FormsNever is null)
        {
            FormsNever = await GetDataFromStorage();
            await RedisCache.SetObjectAsync(cacheKey, FormsNever);
        }
        else
        {
            //判断FormsNever最大年份是否为当年年份，不是则重新获取
            if (FormsNever.GroupByYearCounts.Max(m => m.Year) != DateTime.Now.Year)
            {
                FormsNever = await GetDataFromStorage();
                await RedisCache.SetObjectAsync(cacheKey, FormsNever);
            }
        }


        LotteryCount      = await _LotteryRecordRepository.GetLotteryRecordsCountAsync();
        LotteryWinCount   = await _LotteryRecordRepository.GetLotteryWinRecordsCountAsync();
        RedPacketCount    = await _redPacketRecordRepository.GetRedPacketRecordsCountAsync();
        TotalAmountSum    = await _redPacketRecordRepository.GetRedPacketRecordsTotalAmountAsync();
        OutStorageCount   = await _WLabelStorageRepository.GetTodayOutCountAsync(); 
   
        OutStorageThisYearCount = await _WLabelStorageRepository.GetThisYearOutCountAsync();

        OutStorageCount = await _WLabelStorageRepository.GetCount();

        isgetyear = true;

        StateHasChanged();
    }


    /// <summary>
    /// 从存储中获取数据
    /// </summary>
    /// <returns>返回一个 ReportFormsNever 对象，该对象包含了订单和年度销售数据</returns>
    private async Task<ReportFormsNever> GetDataFromStorage()
    {
        var formsNever = new ReportFormsNever();
        var year = DateTime.Now.Year;

        formsNever.GroupByOrderCounts = await _outStorageRepository.GetGrapByYearAndOrderAsync();
        if (formsNever.GroupByOrderCounts is null || !formsNever.GroupByOrderCounts.Any())
        {
            formsNever.GroupByOrderCounts = await _WLabelStorageRepository.GetGroupByOrderNumbelsAsync(year);
        }

        var groupbyyearorders = await _outStorageRepository.GetGrapByYearAsync();
        formsNever.GroupByYearCounts = groupbyyearorders.GroupBy(g => g.Year)
            .Select(s => new OutStorageAnalysis
                {
                    Year = s.Key,
                    Count = s.Sum(s => s.Count),
                })
            .ToList();

        return formsNever;
    }




    private async Task OnViewDetails(string openid, string phoneNumber)
    {
        var parameters = new DialogParameters();

        // parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ContentTitle", "详细信息");

        parameters.Add("WxOpenId", openid);
        parameters.Add("PhoneNumber", phoneNumber);

        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var resultdialog = await DialogService.ShowAsync<UserRedPacketDetailsDialog>("领取红包明细清单", parameters, options);

        var result = await resultdialog.Result;

    }

}
