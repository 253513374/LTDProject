@page "/receiveredpackmanage"
@using ScanCode.Model.Dto


@attribute [Authorize(Policy = Permissions.RedPackets.RedPacketGiveOutView)]

@inject RedPacketRecordRepository _PacketRecordRepository


<MudPageTitle Title="红包发放" Description="微信扫码得红包发放记录"></MudPageTitle>

@if (PacketRecords is null)
{

    <MudSkeletonComponent></MudSkeletonComponent>
}
else
{

    <MudHidden Breakpoint="Breakpoint.SmAndUp">

        <MudStack AlignItems="AlignItems.Stretch" Spacing="5">
            <MudDateRangePicker @ref="_picker"   PickerVariant="PickerVariant.Dialog" Label="扫码出库时间范围" @bind-DateRange="_dateRange" AutoClose="false">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">清除</MudButton>
                    <MudButton OnClick="@(() => _picker.Close(false))">取消</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(async () => await OnDateRangePickerOk())">确定</MudButton>
                </PickerActions>
            </MudDateRangePicker>
            <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudStack Class="mt-2" Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudButton Color="Color.Primary" OnClick="@(async () => await LoadData())" StartIcon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled">重新加载</MudButton>
                <MudButton Class="mx-3" Color="Color.Primary" OnClick="@(async () => await ExportToExcel())" StartIcon="@Icons.Material.Filled.ImportExport" Variant="Variant.Text">导出Excel</MudButton>

            </MudStack>
        </MudStack>

    </MudHidden>
@*    <MudStack Class="my-5" Row="true"  >
        <MudDateRangePicker   @ref="_picker" Label="查询时间范围" @bind-DateRange="_dateRange" AutoClose="false">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">清除</MudButton>
                <MudButton OnClick="@(() => _picker.Close(false))">取消</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(async () => await OnDateRangePickerOk())">确定</MudButton>
            </PickerActions>
        </MudDateRangePicker>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
    </MudStack>*@

    <MudTable Items="@PacketRecords"
              Filter="new Func<RedPacketRecordDto, bool>(FilterFunc1)"
              Dense="true" Striped="true" @ref="@_table">
        <ToolBarContent>

            <MudHidden Breakpoint="Breakpoint.Xs">
                <MudStack Row="true" AlignItems="AlignItems.Center">
                    <MudButton Color="Color.Primary" OnClick="@(async () => await LoadData())" StartIcon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled">重新加载</MudButton>
                    <MudButton Class="mx-3" Color="Color.Primary" OnClick="@(async () => await ExportToExcel())" StartIcon="@Icons.Material.Filled.ImportExport" Variant="Variant.Text">导出Excel</MudButton>

                </MudStack>
                <MudSpacer></MudSpacer>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="16">
                    <MudDateRangePicker @ref="_picker"  PickerVariant="PickerVariant.Dialog"    Label="扫码出库时间范围" @bind-DateRange="_dateRange" AutoClose="false">
                        <PickerActions>
                            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">清除</MudButton>
                            <MudButton OnClick="@(() => _picker.Close(false))">取消</MudButton>
                            <MudButton Color="Color.Primary" OnClick="@(async () => await OnDateRangePickerOk())">确定</MudButton>
                        </PickerActions>
                    </MudDateRangePicker>
                    <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

                </MudStack>
            </MudHidden>
        </ToolBarContent>

        <HeaderContent>
            
            <MudTh>微信OpenID</MudTh>
            <MudTh>手机号码</MudTh>
            <MudTh>订单号</MudTh>
            <MudTh>标签序号</MudTh>
            <MudTh>验证码</MudTh>
            <MudTh>活动名称</MudTh>
            <MudTh>发放金额(分)</MudTh>
            <MudTh>发放时间</MudTh>

        </HeaderContent>
        <RowTemplate Context="prize">

            <MudTd>@prize.ReOpenId</MudTd>
            <MudTd>@prize.Phone</MudTd>
            <MudTd>@prize.MchbillNo</MudTd>
            <MudTd>@prize.QrCode</MudTd>
            <MudTd>@prize.Captcha</MudTd>
            <MudTd>@prize.ActivityName</MudTd>
            <MudTd>@prize.TotalAmount</MudTd>
            <MudTd>@prize.IssueTime</MudTd>


        </RowTemplate>
        <PagerContent>
            <MudStack Spacing="3" Class="my-5" Justify="Justify.SpaceAround">
                <MudText Typo="Typo.button">@($"总数：{PacketRecords.Count()} ")</MudText>
                <MudPagination Style="justify-content: end" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4"/>
            </MudStack>
        </PagerContent>
    </MudTable>
}
@code {

    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date);

    private MudTable<RedPacketRecordDto> _table;

    private IEnumerable<RedPacketRecordDto> PacketRecords { set; get; }

    // private MudTable<RedPacketRecord> mtable;
    //private MudTable<Element> table;
    private string searchString = null;
    private int redPacketRecordCunt;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
            //PacketRecords = await _PacketRecordRepository.FindAsync(f=>f.CreateTime>=DateTime.Now.Date.AddDays(-90));
            //StateHasChanged();
        }
        return;// base.OnAfterRenderAsync(firstRender);
    }




    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterFunc1(RedPacketRecordDto element) => FilterFunc(element, searchString);

    private bool FilterFunc(RedPacketRecordDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (element.ReOpenId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Captcha.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.QrCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.TotalAmount.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        if ($"{element.ReOpenId} {element.Captcha} {element.QrCode}".Contains(searchString))
            return true;
        return false;
    }

    private async Task OnDateRangePickerOk()
    {
        PacketRecords = null;
        _picker.Close();
        PacketRecords = await _PacketRecordRepository.GetRedPacketRecordsWithPhoneAsync(_dateRange.Start.Value , _dateRange.End.Value);
        return; 
    }

    private async Task LoadData()
    {
        PacketRecords = await _PacketRecordRepository.GetRedPacketRecordsWithPhoneAsync(DateTime.Now.Date.AddDays(-90), _dateRange.End.Value);

        if (PacketRecords is not null && PacketRecords.Count()>1)
        {
            _dateRange.Start = PacketRecords.Min(s => s.CreateTime);
            _dateRange.End = PacketRecords.Max(s => s.CreateTime);
        }
        StateHasChanged();
    }

    private async Task ExportToExcel()
    {

        try
        {
            var fielter = _table.FilteredItems;
            if (fielter.Count()!=0)
            {

                var excelList = FormatDateTime(fielter.ToList());

                var excelData = ExportService.ExportToExcel(excelList);
                var browserBase64 = Convert.ToBase64String(excelData);
                var href = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{browserBase64}";
                await _jsRuntime.InvokeVoidAsync("downloadFile", href, $"{nameof(RedPacketRecord).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx");

                _snackBar.Add(string.IsNullOrWhiteSpace(searchString)
                    ? "领红包记录导出"
                    : "领红包记录过滤导出", Severity.Success);
                }
            else
            {
                _snackBar.Add($"领红包记录数据为null", Severity.Warning);
            }
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error);
        }
    }

    public List<RedPacketRecordExcel> FormatDateTime(List<RedPacketRecordDto> dt)
    {
        return dt.Select(r => new RedPacketRecordExcel
            {
                Id = r.Id,
                QrCode = r.QrCode,
                Captcha = r.Captcha,
                ActivityName = r.ActivityName,
                CashAmount = r.CashAmount,
                ReceiveTime = r.ReceiveTime.ToString("yyyy-MM-dd HH:mm:ss"),
                IssueTime = r.IssueTime.ToString("yyyy-MM-dd HH:mm:ss"),
                MchbillNo = r.MchbillNo,
                MchId = r.MchId,
                WxAppId = r.WxAppId,
                ReOpenId = r.ReOpenId,
                TotalAmount = r.TotalAmount,
                SendListid = r.SendListid,
                NonceStr = r.NonceStr,
                PaySign = r.PaySign,
                Phone = r.Phone
            }).OrderByDescending(o => o.IssueTime).ToList();
    }

    public class RedPacketRecordExcel
    {
        /// <summary>
        /// 主键key
        /// </summary>
        public int Id { get; set; }

        /// <summary>
        /// 标签序号
        /// </summary>
        public string QrCode { get; set; }

        /// <summary>
        /// 验证码
        /// </summary>
        public string? Captcha { get; set; }

        /// 活动名称
        /// </summary>
        public string ActivityName { get; set; }

        /// <summary>
        /// 红包金额
        /// </summary>
        public decimal CashAmount { get; set; }

        /// <summary>
        /// 领取红包的时间
        /// </summary>
        public string ReceiveTime { get; set; }  // Note the type change

        /// <summary>
        /// 红包发放时间
        /// </summary>
        public string IssueTime { get; set; }  // Note the type change

        /// <summary>
        /// 商户订单号
        /// </summary>
        public string MchbillNo { get; set; }

        /// <summary>
        /// 商户号
        /// </summary>
        public string MchId { get; set; }

        /// <summary>
        /// 公众账号appid
        /// </summary>
        public string WxAppId { get; set; }

        //手机号
        public string Phone { get; set; }


        /// <summary>
        /// 用户openid
        /// </summary>
        public string ReOpenId { get; set; }

        /// <summary>
        /// 付款金额
        /// </summary>
        public string TotalAmount { get; set; }

        /// <summary>
        /// 红包订单的微信单号
        /// </summary>
        public string SendListid { get; set; }

        /// <summary>
        /// 随机字符串
        /// </summary>
        public string NonceStr { get; set; }

        /// <summary>
        /// 签名
        /// </summary>
        public string PaySign { get; set; }
    }

}
