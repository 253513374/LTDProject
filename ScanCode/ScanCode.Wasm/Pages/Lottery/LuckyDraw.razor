
@inject ILogger<LuckyDraw> Logger

<MudDialog >
    <DialogContent>
        <MudContainer Style="Width: 70vw; height: 100vw;">
            <MudStack Spacing="3" Justify="Justify.Center"  Style="width:100%;height: 100%;">
                
                <div class="box-container">
                    <div class="box">
                        <div class="box-face"></div>
                        <div class="box-face"></div>
                        <div class="box-face"></div>
                        <div class="box-face"></div>
                        <div class="box-face top @(_isOpenBox? "open-lid" : "")">5</div>
                        <div class="box-face"></div>
                    </div>
                </div>
                <div>
                    @if (LotteryResult is not null)
                    {
                            
                        if (LotteryResult.IsSuccess)
                        {
                            OpenBox();
                        }
                        else
                        {
                            <MudText>很遗憾，您的选择的奖品未被抽中</MudText>
                                OpenBox();
                        }
                    }
                </div>
            </MudStack>
        </MudContainer>
    </DialogContent>
</MudDialog>



@code {


    [CascadingParameter] public MudDialogInstance Instance { get; set; }


    [Parameter] public string QrCode { set; get; }

    [Parameter] public string OpenId { set; get; }

    [Parameter] public string PrizeNumber { set; get; }

    private LotteryResult LotteryResult { set; get; }

    private bool _isOpenBox = false;


    DialogParameters _parameters = new();
    JsonSerializerOptions _options = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LotteryResult =  await  OnLuckyDraw();

            StateHasChanged();
        }
       // return base.OnAfterRenderAsync(firstRender);
    }

    
    private async Task OpenBox()
    {
        //await Task.Delay(5000); // 等待动画完成，这里的 5000 是动画持续时间（5秒）的毫秒表示
        _isOpenBox = true;
        StateHasChanged();
    }

    /// <summary>
    /// 开始抽奖
    /// </summary>
    /// <returns></returns>
    private async Task<LotteryResult> OnLuckyDraw()
    {
        try
        {
            using  var httpClient = HttpClientFactory.CreateClient("weixin");
            if (string.IsNullOrEmpty(QrCode) && string.IsNullOrEmpty(OpenId) && string.IsNullOrEmpty(PrizeNumber))
            {
                return null;
            }
            var url = $"Lottery?qrcode={QrCode}&openid={OpenId}&prizennumber={PrizeNumber}";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<LotteryResult>(stream, _options);
            }
            return null;
        }
        catch (Exception e)
        {
            Logger.LogError($"获取抽奖活动信息异常：{e.Message}");
        }
        return null;
    }
}
