@page "/lottery"



@inherits ComponentBase

@inject IJSRuntime JsRuntime
@inject ILogger<PrizesShow> Logger

<style>
    body {
        background-image: linear-gradient(rgb(109, 187, 255) 2%,rgba(109, 187, 255,0.3) 10%, rgba(0, 0, 254, 0.450)),url('imgs/hongbaobeijing.png'),url('imgs/middle_image.png'), url('imgs/bottom_image.png') !important
    }

    .lotterycard {
        background-color: rgba(255,255,255,0.5);
        border-radius: 25px;
        margin-bottom: 100px; /* 设置距离底部的距离为 100px */
    }

    .text-banner {
        Position: absolute;
        top: 18%;
        /* align-content: center; */
        /* justify-content: center; */
        font-size:2rem;
        color: white;
        font-weight: 700;
        letter-spacing: 0.3em;
    }
    .text-banner2 {
        Position: absolute;
        top: 55%;
        /* align-content: center; */
        /* justify-content: center; */
        font-size:0.8rem;
        color: white;
        font-weight: 700;
        letter-spacing: 0.3em;
    }
    .text-banner3 {
        Position: absolute;
        top: 70%;
        /* align-content: center; */
        /* justify-content: center; */
        font-size:1rem;
        color: white;
        font-weight: 700;
        letter-spacing: 0.1em;
    }
    .prize-grid-background {
        background-image: url('imgs/jiang.png');
        background-size: 100% 100%;
        background-repeat: no-repeat;
        background-position: center center;
        height: 100vw;
        width: 100%;
    }
    /* 奖品9宫格展示设置网格布局 */
    .prize-grid-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(3, 1fr);
        grid-gap: 5px;
        position: relative;
        top: 7%;
        width: 72vw; /* 使用vw单位设置宽度 */
        height: 68vw; /* 使用vw单位设置高度 */
        --bs-aspect-ratio: 1 / 1; /* 设置宽高比为1:1 */
        margin: 0 auto;
    }

    .prizegridi-image-container {
        display: flex;
        position: relative;
        width: 100%;
        justify-content: center;
        padding: 0px;
        margin: 0px;
    }

    /*抽奖按钮*/
    .lottery-button {
        position: relative;
        border: none;
        background: transparent;
        padding: 0;
        cursor: pointer;
        outline-offset: 4px;
        transition: filter 250ms;
        user-select: none;
        touch-action: manipulation;
    }

    .lottery-button-shadow {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 12px;
        background: hsl(0deg 0% 0% / 0.25);
        will-change: transform;
        transform: translateY(2px);
        transition: transform 600ms cubic-bezier(.3, .7, .4, 1);
    }

    .lottery-button-edge {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border-radius: 12px;
        background: linear-gradient( to left, hsl(340deg 100% 16%) 0%, hsl(340deg 100% 32%) 8%, hsl(340deg 100% 32%) 92%, hsl(340deg 100% 16%) 100% );
    }

    .lottery-button-front {
        display: block;
        position: relative;
        padding: 12px 27px;
        border-radius: 12px;
        font-size: 1.1rem;
        color: white;
        background: hsl(345deg 100% 47%);
        will-change: transform;
        transform: translateY(-4px);
        transition: transform 600ms cubic-bezier(.3, .7, .4, 1);
    }

    .lottery-button:hover {
        filter: brightness(110%);
    }

    .lottery-button:hover .front {
        transform: translateY(-6px);
        transition: transform 250ms cubic-bezier(.3, .7, .4, 1.5);
    }

    .lottery-button:active .front {
        transform: translateY(-2px);
        transition: transform 34ms;
    }

    .lottery-button:hover .shadow {
        transform: translateY(4px);
        transition: transform 250ms cubic-bezier(.3, .7, .4, 1.5);
    }

    .lottery-button:active .shadow {
        transform: translateY(1px);
        transition: transform 34ms;
    }

    .lottery-button:focus:not(:focus-visible) {
        outline: none;
    }
</style>





@if (Container.Activity is not null)
{

    <MudStack Class="position-relative" Justify="Justify.Center" AlignItems="AlignItems.Center">
        
        <img src="imgs/biaoti.png" style="width: 100%" />
        <MudText Class="text-banner" >幸运大抽奖</MudText>
        <MudText Class="text-banner2" >—活动倒计时—</MudText>
        <MudText Class="text-banner3">@TimeRemaining.Days 天 @TimeRemaining.Hours 时 @TimeRemaining.Minutes 分 @TimeRemaining.Seconds 秒</MudText>
        
        
    </MudStack>

   

    <MudStack Spacing="3">

    
        <MudText Typo="Typo.h5" Style="justify-content: center;display: flex;">@Container.Activity.Name</MudText>

        @if (!string.IsNullOrEmpty(Container.Activity.ActivityImage))
        {

            <MudImage Src="@Container.Activity.ActivityImage.GetImageUrl()" Style="max-width: 90vw;border-radius: 5px;" ObjectFit="ObjectFit.Contain"></MudImage>
        }


        <MudText Typo="Typo.body2"> @Container.Activity.Description</MudText>

        <MudText Class="my-3" Typo="Typo.button" Style="letter-spacing:.3em">抽奖号码：@Container.QrCode</MudText>
    </MudStack>

    <div class="prize-grid-background">
        <div class="prize-grid-container">
            @if (Container.Activity is not null)
            {
                foreach (var prize in Container.Activity.Prizes)
                {
                    <PrizeGridItem IsRound="false" PrizeItem="@prize" Class="prizegridi-image-container" DisplayMode="PrizeDisplayMode.Simple"
                                   Clicked="@((item) => OnGridItemClick(item))"
                                   OnShowDetails="@ShowPrizeDetailsDialog" />
                }
            }
        </div>
    </div>
   

    if (SelectedPrizeItem is not null )
    {
        <MudStack Style="height: 55px"  AlignItems="AlignItems.Center" Justify="Justify.Center" Class="my-8">
            <button class="lottery-button" onclick="@OnLuckyDraw">
                <span class="lottery-button-shadow"></span>
                <span class="lottery-button-edge"></span>
                <span class="lottery-button-front text">
                    开始抽奖
                </span>
            </button>
        </MudStack>
    }
    else
    {
        <MudStack Style="height: 55px" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="my-8" />
    }
@*    <MudButton OnClick="OpenDialogAsync">测试领取红包成功</MudButton>
*@
    <MudCard Elevation="0" Class="lotterycard mt-8">
        <div Class="Cardimage-container">
            <img class="Cardimage-centered-image" src="imgs/tou.png"  />
        </div>

        <MudStack Class="my-5 pa-5" Justify="Justify.FlexStart" Spacing="2">

            <MudText Typo="Typo.caption">1.抽奖活动的主题、奖品、时间和参与方式将在抽奖活动开始前公布。 </MudText>
            <MudText Typo="Typo.caption">2.如果中奖者在规定时间内未领取奖品，或者无法提供真实、准确、完整的信息，其中奖资格将被取消。 </MudText>
            <MudText Typo="Typo.caption">3.奖品将在规定的时间内发放。中奖者需要提供真实、准确、完整的联系信息以便奖品发放。 </MudText>
            <MudText Typo="Typo.caption">4.抽奖活动的主办方有权根据实际情况对规则进行修改和解释。如有任何争议，主办方有最终决定权。 </MudText>
            <MudText Typo="Typo.caption">5.参与者在参与抽奖活动的过程中应遵守相关法律法规和道德规范。如参与者违反相关规定，主办方有权取消其参与资格。 </MudText>
            <MudText Typo="Typo.caption">6.抽奖活动的主办方有权根据实际情况对规则进行修改和解释。如有任何争议，主办方有最终决定权。 </MudText>
            <MudText Typo="Typo.caption">7.参与者在参与抽奖活动的过程中产生的任何问题、损失或损害，主办方不承担任何责任。 </MudText>
            <MudText Typo="Typo.caption">8.参与者在参与抽奖活动的过程中，主动或被动地向主办方提供的所有信息，主办方将严格保密，并仅用于抽奖活动及后续相关事宜。 </MudText>
        </MudStack>
    </MudCard>
@*    <div class="spinner-container" style="@(isSpinning ? "display:flex;" : "display:none;")">
        <div class="spinner"></div>
    </div>*@

    <div>.</div>
    <MudOverlay ZIndex="Int32.MaxValue" Visible="_isProcessing" DarkBackground="true" Absolute="true">
        <MudProgressCircular Size="Size.Large" Color="Color.Secondary" Indeterminate="true" />
    </MudOverlay>


}
else
{
    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height:100vh " >
        <MudIcon Color="Color.Warning" Icon="@Icons.Material.Filled.Info" Style="Width:64px;height: 64px;"></MudIcon>
        <MudText Typo="Typo.h5">请使用微信扫一扫打开来链接！不要刷新页面</MudText>
    </MudStack>
}


@code {
    //[CascadingParameter(Name = "qrcode")]
    //public string QRCode { get; set; }
    private bool _isProcessing = false;
    //[CascadingParameter(Name = "openid")]
    //public string OpenId { set; get; }
    private PrizeGridItem SelectedPrizeItem { get; set; }

    //private int? selectedItem = null;
    //private bool isSpinning = false;
    //private string boxContainerClass;
   // private bool boxOpened = false;


    private TimeSpan TimeRemaining { get; set; }
    private System.Timers.Timer CountdownTimer { get; set; }
    /// <summary>
    /// 抽奖结果
    /// </summary>
    //private LotteryResult lotteryResult;

    [Inject]
    protected DataStateContainer Container { set; get; }




    DialogParameters _parameters = new();
    JsonSerializerOptions _options = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true
    };
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CountdownTimer = new System.Timers.Timer(1000);
            CountdownTimer.Elapsed += (sender, args) => UpdateTimeRemaining();
            CountdownTimer.AutoReset = true;
            CountdownTimer.Enabled = true;
        }


        return base.OnAfterRenderAsync(firstRender);
    }
    private async Task<ActivityResult> GetLotteryActivityAsync()
    {
        try
        {
            using  var httpClient = HttpClientFactory.CreateClient("weixin");
            var url = $"LotteryActivity";
            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<ActivityResult>(stream, _options);
            }
            Logger.LogError($"获取抽奖活动信息失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            Logger.LogError($"获取抽奖活动信息异常：{e.Message}");
        }
        return null;
    }




    //private Task togglePrizeSelection(PrizeDraw prizeDraw)
    //{
    //    // throw new NotImplementedException();

    //    return Task.CompletedTask; 
    //}

    //public Task CheckedPrize(PrizeResult prizeResult)
    //{
    //    return Task.CompletedTask;
    //}

    //private Task OnPrizeItemClick(PrizeResult arg)
    //{

    //    //_ = ShowPrizeDetailsDialog();
    //    return  Task.CompletedTask;
    //}

    /// <summary>
    ///  显示奖品详情
    /// </summary>
    /// <returns></returns>
    private async Task ShowPrizeDetailsDialog()
    {
        var parameters = new DialogParameters
        {
               ["PrizeDetails"] = SelectedPrizeItem.PrizeItem
        };
        var options = new DialogOptions
        {
            CloseButton = true, 
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            DisableBackdropClick = true,
            CloseOnEscapeKey = true,
            NoHeader = true,
        };
        await _dialogService.ShowAsync<PrizeDetailsDialog>("奖品详情",parameters, options);
    }

    /// <summary>
    /// 控制子组件得UI状态
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    private Task OnGridItemClick(PrizeGridItem item)
    {
        //throw new NotImplementedException();
        if (SelectedPrizeItem != null)
        {
            SelectedPrizeItem.IsSelected = false;
            SelectedPrizeItem.IsDetailButton= false;
        }
        SelectedPrizeItem = item;
        SelectedPrizeItem.IsSelected = true;
        SelectedPrizeItem.IsDetailButton = true;

        return Task.CompletedTask;
    }

    /// <summary>
    /// 活动倒计时
    /// </summary>
    /// <returns></returns>
    private Task UpdateTimeRemaining()
    {
        if (Container.Activity is not null)
        {
            TimeRemaining = Container.Activity.EndTime.Value - DateTime.Now;
            if (TimeRemaining < TimeSpan.Zero)
            {
                TimeRemaining = TimeSpan.Zero;
                CountdownTimer.Enabled = false;
            }
        }
        InvokeAsync(StateHasChanged);

        return  Task.CompletedTask;
    }


    private async  Task OnLuckyDraw()
    {
        // 如果 _isProcessing 为 true，直接返回
        if (_isProcessing)
        {
            return;
        }
        // 设置 _isProcessing 为 true
        _isProcessing = true;
        try
        {
            var verifyresult = Container.IsVerify(SelectedPrizeItem.PrizeItem.PrizeNumber);

#if DEBUG
            await Task.Delay(3000);
#endif

            if (verifyresult)
            {
                var luckyresult = await LuckyDraw(Container.QrCode, Container.OpenId, SelectedPrizeItem.PrizeItem.PrizeNumber);
        

                var parameters = new DialogParameters
                {
                    ["LotteryResult"] = luckyresult
                };
                var options = new DialogOptions { 
                    CloseButton = true,
                    FullWidth = true, 
                    MaxWidth = MaxWidth.Large,
                    DisableBackdropClick = true,
                    NoHeader = true,
                };
                var result= _dialogService.Show<LotteryResultDialog>("",parameters, options);

            }
        }
        finally
        {
            // 将 _isProcessing 设置回 false
            _isProcessing = false;
        }

       
    }
    /// <summary>
    /// 开始抽奖
    /// </summary>
    /// <returns></returns>
    private async Task<LotteryResult> LuckyDraw(string qrcode, string openid, string prizenumber)
    {
        try
        {
            using  var httpClient = HttpClientFactory.CreateClient("weixin");
            var url = $"Lottery?qrcode={qrcode}&openid={openid}&prizennumber={prizenumber}";

            var response = await httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var redstatusresult = await response.Content.ReadFromJsonAsync<ApiResponse<LotteryResult>>();

                if (redstatusresult.IsSuccess)
                {
                    return redstatusresult.Data;
                }
              
                return LotteryResult.Fail(redstatusresult.Message);

            }
            return LotteryResult.Fail(response.StatusCode.ToString());
        }
        catch (Exception e)
        {
            Logger.LogError($"抽奖异常：{e.Message}");

            return LotteryResult.Fail(e.Message);
        }
    }

    /// <summary>
    /// 测试中奖对话框
    /// </summary>
    private  async Task OpenDialogAsync()
    {

        var lotteryresult = LotteryResult.Success(SelectedPrizeItem.PrizeItem.Name,
            "实物", 
            SelectedPrizeItem.PrizeItem.ImageUrl,
            SelectedPrizeItem.PrizeItem.Description,
            SelectedPrizeItem.PrizeItem.PrizeNumber,
            "恭喜你，中大奖啦!");

        Container.LotteryResult = lotteryresult;
        var parameters = new DialogParameters
        {
                ["LotteryResult"] = lotteryresult
        };
        var options = new DialogOptions { 
            CloseButton = true,
            FullWidth = true, 
            MaxWidth = MaxWidth.Large,
            DisableBackdropClick = true,
            NoHeader = true,
        };
        var result= _dialogService.Show<LotteryResultDialog>("",parameters, options);
    }
}
