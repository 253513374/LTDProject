@page "/redpacked"

@inherits ComponentBase
@inject ILogger<RedPacked> Logger
<style>
    body {
        background-image: linear-gradient(rgb(109, 187, 255) 2%,rgba(109, 187, 255,0.3) 10%, rgba(0, 0, 254, 0.450)),url('imgs/hongbaobeijing.png'),url('imgs/logo2.png'), url('imgs/bottom_image.png') !important
    }

    .hongbaocard {
        border-radius: 25px;
        margin-bottom: 100px; /* 设置距离底部的距离为 100px */
    }

    .btn-radpack-captcha {
        border-radius: 100px;
        width: 150px; 
        padding: 10px;
        /*  height: 35px;*/
        font-weight: 700;
        font-size: 1.2rem;
        opacity: 0.860;
        letter-spacing: .2em;
        transition: transform 0.1s ease-in-out;
        background-image: -moz-linear-gradient( -92deg, rgb(253,241,240) 0%, rgb(252,191,183) 100%);
        background-image: -webkit-linear-gradient( -92deg, rgb(253,241,240) 0%, rgb(252,191,183) 100%);
        background-image: -ms-linear-gradient( -92deg, rgb(253,241,240) 0%, rgb(252,191,183) 100%);
        box-shadow: 0px 5px 0px 0px rgba(20, 71, 172, 0.004);
        z-index: 89;
        color: #9b3646;
    }
    .btn-radpack {
       
        border-radius: 100px;
        width: 200px; 
        padding: 10px;
      /*  height: 35px;*/
        font-weight: 700;
        font-size: 1.2rem;
        opacity: 0.860;
        letter-spacing: .2em;
        transition: transform 0.1s ease-in-out;
        background-image: -moz-linear-gradient( -92deg, rgb(253,241,240) 0%, rgb(252,191,183) 100%);
        background-image: -webkit-linear-gradient( -92deg, rgb(253,241,240) 0%, rgb(252,191,183) 100%);
        background-image: -ms-linear-gradient( -92deg, rgb(253,241,240) 0%, rgb(252,191,183) 100%);
        box-shadow: 0px 5px 0px 0px rgba(20, 71, 172, 0.004);
        z-index: 89;
        color: #9b3646;
    }

        .btn-radpack:active {
        transform: scale(0.9);
    }

    .btn-radpack-container {
        display: flex;
        justify-content: center;
    }

</style>


<MudStack Spacing="2">
    
    <img src="imgs/dapaisong.png" class="image-container" style="margin-top: 50px" />
    @*显示图片*@
    <img src="imgs/hongbao.png" class="image-container" />
</MudStack>

<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Class="my-8">
        
    
    @switch (Container.UserStatus.StuteCode)
    {
        case "QRCODE":
            <div class="btn-radpack-container">
                <MudButton OnClick="@GetRedPacketAsync" Class="btn-radpack">立刻领取</MudButton>
            </div>
        break;
        case "CAPTCHA":
            <MudStack Row="false" Justify="Justify.Center" AlignItems="AlignItems.Center">
                <MudTextField MaxLength="4" AutoFocus="true" Style="background-color: white"  Variant="Variant.Filled" FullWidth="false" T="string" @bind-Text="@Captcha" Label="红包验证码"></MudTextField>
                <MudButton OnClick="@GetRedPacketCaptchaAsync" Class="btn-radpack">立刻领取</MudButton>
            </MudStack>
        break;

        case "MAXIMUMLIMIT":

            _= OpenDialogAsync();
            <MudText Align="Align.Center" Style="font-weight: 700" Color="Color.Error">@Container.UserStatus.StuteCode : @Container.UserStatus.Message</MudText>
            break;

        default:
           
            <MudText Align="Align.Center" Style="font-weight: 700" Color="Color.Error">@Container.UserStatus.StuteCode : @Container.UserStatus.Message</MudText>
        break;
    }
@*
        <MudButton OnClick="OpenDialogAsync">测试领取红包成功</MudButton>*@

    
</MudStack>

@* <MudButton OnClick="OpenPhoneCaptchaDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
    Open Simple Dialog
</MudButton> *@

<MudCard Elevation="0" Class="hongbaocard mt-10" >
    <div Class="Cardimage-container">
        <img class="Cardimage-centered-image" src="imgs/tou.png" />
    </div>
    <MudStack Class="my-2 pa-5" Justify="Justify.FlexStart" Spacing="2">
        
        <MudText Typo="Typo.caption ">1.红包活动主题、奖品、时间和参与方式将在活动开始前通过公众号推文、官方网站等渠道公布。                                                     </MudText>
        <MudText Typo="Typo.caption ">2.活动期间，用户需关注活动公众号并完成相应任务，即有机会赢取红包奖励。                          </MudText>
        <MudText Typo="Typo.caption ">3.每位用户每天可参与活动一次，红包金额随机，具体金额将在用户领取后显示。                                  </MudText>
        <MudText Typo="Typo.caption ">4.红包奖励将实时发放至用户的微信钱包，用户需确保微信钱包功能正常，以便顺利领取红包。                           </MudText>
        <MudText Typo="Typo.caption ">5.活动主办方有权根据实际情况对活动规则进行修改和解释。如有任何争议，主办方有最终决定权。           </MudText>
        <MudText Typo="Typo.caption ">6.参与者在参与红包活动过程中应遵守相关法律法规和道德规范。如参与者违反相关规定，主办方有权取消其参与资格。                           </MudText>
        <MudText Typo="Typo.caption ">7.参与者在参与红包活动过程中，主动或被动地向主办方提供的所有信息，主办方将严格保密，并仅用于红包活动及后续相关事宜。                                    </MudText>
        <MudText Typo="Typo.caption ">8.请密切关注活动公告，参与活动，赢取红包奖励，祝您好运！ </MudText>
    </MudStack>
</MudCard>

<div>.</div>
<MudOverlay ZIndex="Int32.MaxValue" Visible="_isProcessing" DarkBackground="true" Absolute="true">
    <MudProgressCircular Size="Size.Large" Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

@code {


    [Inject]
    protected DataStateContainer Container { set; get; }

    private string Captcha { set; get; }


    private bool _isProcessing = false;


    DialogOptions _options = new DialogOptions
    {
        CloseButton = true, 
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        DisableBackdropClick = true,
        CloseOnEscapeKey = true,
        NoHeader = true,
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isProcessing = false;
            StateHasChanged();
        }
        //  return base.OnAfterRenderAsync(firstRender);
    }


    /// <summary>
    /// 异步方法，用于通过扫描二维码领取红包。
    /// </summary>
    /// <remarks>
    /// 此方法首先检查 OpenId 和 QRCode 是否为空。如果其中任何一个为空，方法将直接返回。
    /// 然后，它会检查是否正在处理其他请求（由 _isProcessing 变量表示）。如果是，则直接返回。
    /// 如果不是，它将设置 _isProcessing 为 true，表示开始处理请求。
    /// 接着，它会尝试调用 GetRedPacketResultQrCodeAsync 方法来领取红包。
    /// 如果领取成功，它会将红包金额转换为两位小数的字符串，并显示一个包含红包金额的对话框。
    /// 如果领取失败，它会显示一个包含错误消息的对话框。
    /// 最后，无论成功还是失败，它都会将 _isProcessing 设置回 false，表示请求处理完毕。
    /// </remarks>
    private async Task GetRedPacketAsync()
    {
        if (string.IsNullOrWhiteSpace(Container.OpenId) || string.IsNullOrWhiteSpace(Container.QrCode))
        {
            return;
        }


        var result = await IsNeedPhoneCaptchaAsync(Container.OpenId);
        if (result)
        {
            var isPhoneCaptchaResult = await OpenPhoneCaptchaDialogAsync();

            if (!isPhoneCaptchaResult)
            {
               
                return;
            }
        }


        //截流，每次只能点击一次
        if (_isProcessing)
        {
            return;
        }
        _isProcessing = true;


        try
        {

            

            var options = new DialogOptions
            {
                CloseButton = true, 
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                DisableBackdropClick = true,
                CloseOnEscapeKey = true,
                NoHeader = true,
            };

            var redpacketresult = await GetRedPacketResultQrCodeAsync(Container.OpenId, Container.QrCode);
            if (redpacketresult.IsSuccess)
            {

                try
                {
                    double parsedDouble = Convert.ToDouble(redpacketresult.TotalAmount);

                    double valueWithTwoDecimals = Math.Round(parsedDouble / 100, 2);
                    redpacketresult.TotalAmount = $"¥{valueWithTwoDecimals}";
                }
                catch (FormatException)
                {
                    redpacketresult.TotalAmount = "¥0.00";
                }
                var parameters = new DialogParameters();
                parameters.Add("Result", redpacketresult);
                parameters.Add("Message","恭喜你！已领取红包");
                await _dialogService.ShowAsync<RedPackedResultDialog>("红包详情",parameters, options);
            }
            else
            {
                var parameters = new DialogParameters();
                parameters.Add("Result", redpacketresult);
                parameters.Add("Message",redpacketresult.Message);
                await _dialogService.ShowAsync<RedPackedResultDialog>("红包详情",parameters, options);
            }
        }
        finally
        {
            // 将 _isProcessing 设置回 false
            _isProcessing = false;
        }

    }


    /// <summary>
    /// 使用验证码领取红包的异步方法。
    /// </summary>
    /// <remarks>
    /// 此方法首先检查验证码、OpenId 和 QRCode 是否为空。如果其中任何一个为空，方法将直接返回。
    /// 然后，它会检查是否正在处理其他请求（由 _isProcessing 变量表示）。如果是，则直接返回。
    /// 如果不是，它将设置 _isProcessing 为 true，表示开始处理请求。
    /// 接着，它会尝试调用 GetRedPacketResultCaptchaAsync 方法来领取红包。
    /// 如果领取成功，它会将红包金额转换为两位小数的字符串，并显示一个包含红包金额的对话框。
    /// 如果领取失败，它会显示一个包含错误消息的对话框。
    /// 最后，无论成功还是失败，它都会将 _isProcessing 设置回 false，表示请求处理完毕。
    /// </remarks>
    private async Task GetRedPacketCaptchaAsync()
    {

        var result = await IsNeedPhoneCaptchaAsync(Container.OpenId);
        if (result)
        {
            var isPhoneCaptchaResult = await OpenPhoneCaptchaDialogAsync();

            if (!isPhoneCaptchaResult)
            {
                return;
            }
        }



        var options = new DialogOptions
        {
            CloseButton = true, 
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            DisableBackdropClick = true,
            CloseOnEscapeKey = true,
            NoHeader = true,
        };
        if (string.IsNullOrWhiteSpace(Captcha)||string.IsNullOrWhiteSpace(Container.OpenId) || string.IsNullOrWhiteSpace(Container.QrCode))
        {
#if DEBUG
    var parameters = new DialogParameters();
    parameters.Add("Msg", $"Captcha:{Captcha}  OpenId:{Container.OpenId}  QRCode:{Container.QrCode}");
    await _dialogService.ShowAsync<DeBugDialog>("红包详情",parameters, options);
#endif

            return;
        }

        // 如果 _isProcessing 为 true，直接返回
        if (_isProcessing)
        {
            return;
        }
        // 设置 _isProcessing 为 true
        _isProcessing = true;
        try
        {


            var redpacketresult = await GetRedPacketResultCaptchaAsync(Container.OpenId, Container.QrCode,Captcha);
            if (redpacketresult.IsSuccess)
            {


                //int parsedValue = 0;

                try
                {
                    double parsedDouble = Convert.ToDouble(redpacketresult.TotalAmount);

                    double valueWithTwoDecimals = Math.Round(parsedDouble / 100, 2);
                    redpacketresult.TotalAmount = $"¥{valueWithTwoDecimals}";
                }
                catch (FormatException)
                {
                    redpacketresult.TotalAmount = "¥0.00";
                    // Console.WriteLine("Failed to parse TotalAmount");
                }
                var parameters = new DialogParameters();
                parameters.Add("Result", redpacketresult);
                parameters.Add("Message","恭喜你！已领取红包");
                await _dialogService.ShowAsync<RedPackedResultDialog>("红包详情",parameters, options);
            }
            else
            {
                var parameters = new DialogParameters();
                parameters.Add("Result", redpacketresult);
                parameters.Add("Message",redpacketresult.Message);
                await _dialogService.ShowAsync<RedPackedResultDialog>("红包详情",parameters, options);
            }
        }
        finally
        {
            // 将 _isProcessing 设置回 false
            _isProcessing = false;
        }
    }



    [Inject] private IDialogService DialogService { get; set; }
    /// <summary>
    /// 异步方法，用于判断是否需要手机验证码。
    /// </summary>
    /// <param name="openid">用户的 OpenId。</param>
    /// <returns>如果需要手机验证码，返回 true；否则返回 false。</returns>
    /// <remarks>
    /// 此方法首先创建一个 HttpClient 实例，然后向指定的 URL 发送 GET 请求。
    /// URL 的格式为 "AliyunSmsVerifyCode/Exists?openid={openid}"，其中 {openid} 是方法的参数。
    /// 如果请求成功，方法将从响应中读取 JSON 字符串，然后将其反序列化为 bool 值。
    /// 如果请求失败，方法将抛出一个包含错误状态码的异常。
    /// </remarks>
    private async Task<bool> IsNeedPhoneCaptchaAsync(string openid)
    {

        try
        {
            using var httpClient = HttpClientFactory.CreateClient("weixin");

            var response = await httpClient.GetAsync($"AliyunSmsVerifyCode/Exists?openid={openid}");

            if (response.IsSuccessStatusCode)
            {
                // var jsonString = await response.Content.ReadAsStringAsync();
                // var result = JsonSerializer.Deserialize<bool>(jsonString);

                var redpacketresult = await response.Content.ReadFromJsonAsync<AliyunSmsResult>();

                return !redpacketresult.IsSuccess;
            }
            else
            {
                throw new Exception($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            bool? result = await DialogService.ShowMessageBox(
          "Warning",
          $"{ex.Message}",
          yesText: "Delete!", cancelText: "Cancel");
            // throw;

            return true;
        }
        
    }





    /// <summary>
    /// 异步方法，用于通过扫描二维码领取红包。
    /// </summary>
    /// <param name="openid">用户的 OpenId。</param>
    /// <param name="qrcode">二维码信息。</param>
    /// <returns>领取红包的结果。</returns>
    /// <remarks>
    /// 此方法首先创建一个 HttpClient 实例，然后向指定的 URL 发送 POST 请求。
    /// URL 的格式为 "RedPacket/QRCode?openid={openid}&qrcode={qrcode}"，其中 {openid} 和 {qrcode} 是方法的参数。
    /// 如果请求成功，方法将从响应中读取 JSON 字符串，然后将其反序列化为 RedPacketResult 对象。
    /// 如果请求失败，方法将记录错误信息，并返回一个包含错误状态码的 RedPacketResult 对象。
    /// </remarks>
    private async Task<RedPacketResult> GetRedPacketResultQrCodeAsync(string openid, string qrcode)
    {
        try
        {

            using  var httpClient = HttpClientFactory.CreateClient("weixin");
            var url = $"RedPacket/QRCode?openid={openid}&qrcode={qrcode}";

            var response = await httpClient.PostAsync(url, null);
            if (response.IsSuccessStatusCode)
            {
                var redpacketresult = await response.Content.ReadFromJsonAsync<ApiResponse<RedPacketResult>>();

                if (redpacketresult.IsSuccess)
                {
                    return redpacketresult.Data;
                }

                return RedPacketResult.Fail(redpacketresult.Message);
                //return new RedPacketResult() { Message = redpacketresult.Message };
            }
            Logger.LogError($"二维码领取现金红包失败：{response.StatusCode}");
            return RedPacketResult.Fail(response.StatusCode.ToString());

        }
        catch (Exception e)
        {
            DialogParameters parameters = new();
            parameters.Add("Msg", $"二维码领取现金红包异常：{e.Message}");
            await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
            Logger.LogError($"二维码领取现金红包异常：{e.Message}");

            return RedPacketResult.Fail(e.Message);
        }

    }

    /// <summary>
    /// 异步方法，用于通过输入验证码领取红包。
    /// </summary>
    /// <param name="openid">用户的 OpenId。</param>
    /// <param name="qrcode">二维码信息。</param>
    /// <param name="captcha">用户输入的验证码。</param>
    /// <returns>领取红包的结果。</returns>
    /// <remarks>
    /// 此方法首先创建一个 HttpClient 实例，然后向指定的 URL 发送 POST 请求。
    /// URL 的格式为 "RedPacket/Captcha?openid={openid}&qrcode={qrcode}&captcha={captcha}"，其中 {openid}、{qrcode} 和 {captcha} 是方法的参数。
    /// 如果请求成功，方法将从响应中读取 JSON 字符串，然后将其反序列化为 RedPacketResult 对象。
    /// 如果请求失败，方法将记录错误信息，并返回一个包含错误状态码的 RedPacketResult 对象。
    /// </remarks>
    private async Task<RedPacketResult> GetRedPacketResultCaptchaAsync(string openid, string qrcode, string captcha)
    {
        try
        {

            using  var httpClient = HttpClientFactory.CreateClient("weixin");
            var url = $"RedPacket/Captcha?openid={openid}&qrcode={qrcode}&captcha={captcha}";

            var response = await httpClient.PostAsync(url, null);
            if (response.IsSuccessStatusCode)
            {
                var redpacketresult = await response.Content.ReadFromJsonAsync<ApiResponse<RedPacketResult>>();

                if (redpacketresult.IsSuccess)
                {
                    return redpacketresult.Data;
                }

                return RedPacketResult.Fail(redpacketresult.Message);
                //return new RedPacketResult() { Message = redpacketresult.Message };
            }
            Logger.LogError($"验证码领取现金红包失败：{response.StatusCode}");
            return RedPacketResult.Fail(response.StatusCode.ToString());

        }
        catch (Exception e)
        {
            DialogParameters parameters = new();
            parameters.Add("Msg", $"验证码领取红包异常：{e.Message}");
            await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters,_options);
            Logger.LogError($"验证码领取现金红包异常：{e.Message}");

            return RedPacketResult.Fail(e.Message);
        }

    }


    /// <summary>
    /// 打开红包被领取完毕对话框
    /// </summary>
    private  async Task OpenDialogAsync()
    {

        double totalAmount = 0;

        double parsedDouble = Convert.ToDouble(totalAmount);
        double valueWithTwoDecimals = Math.Round(parsedDouble / 100, 2);
        string actualResult = $"¥{valueWithTwoDecimals}";


        var parameters = new DialogParameters();
        parameters.Add("Result", new RedPacketResult() { IsSuccess = true, TotalAmount = actualResult });
        parameters.Add("Message", "红包被领取完毕！");
        await _dialogService.ShowAsync<RedPackedResultDialog>("红包详情", parameters, _options);
    }

    /// <summary>
    /// 打开手机验证码对话框
    /// </summary>
    /// <returns>验证码校验通过返回true,否则返回false</returns>
    private async Task<bool> OpenPhoneCaptchaDialogAsync()
    {

        DialogOptions _options = new DialogOptions
            {
                CloseButton = true,
                FullWidth = true,
                DisableBackdropClick = true,
                CloseOnEscapeKey = true,
                NoHeader = true,
            };

        var parameters = new DialogParameters();
     
        var dialog = _dialogService.Show<VerifyCodeDialog>("验证手机号", parameters, _options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            return true;

        }

        return false;

    }
}
