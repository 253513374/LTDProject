@page "/identity/roles"
@using Wtdl.Admin.Pages.Authentication.ViewModel


<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<MudPageTitle Title="角色" Description="角色管理"></MudPageTitle>
@if (WtdlRoles is null)
{
   <MudSkeletonComponent></MudSkeletonComponent>
}
else
{
    <MudTable Hover="true" Elevation="25" Items="WtdlRoles" Filter="new Func<WtdlRole, bool>(Search)">
        <ToolBarContent>
            <div class="justify-center mud-text-align-center">
                <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary" OnClick="(() => InvokeModal(new WtdlRole()))" StartIcon="@Icons.Material.Filled.Add" IconColor="Color.Surface">新建角色</MudButton>
                <MudButton DisableElevation Variant="Variant.Filled" OnClick="GetRolesAsync" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary">重新加载</MudButton>
            </div>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="角色查询" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"></MudTextField>
            
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<WtdlRole, object>(x => x.Id)">Id</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WtdlRole, object>(x => x.Name)">角色名称</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WtdlRole, object>(x => x.Description)">角色描述</MudTableSortLabel></MudTh>
            <MudTh Style="text-align:right">动作</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Role">
                <MudHighlighter Text="@context.Name" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Description">
                <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
            </MudTd>
            <MudTd DataLabel="Actions" Style="text-align: right">
            
                    <MudMenu Label="动作" Variant="Variant.Filled" DisableElevation="true" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" Direction="Direction.Left" OffsetX="true">
                        <MudMenuItem @onclick="@(() => ManagePermissions(@context.Id))">管理权限</MudMenuItem>
                        <MudMenuItem @onclick="@(() => InvokeModal(@context,AtionType.Update))">编辑</MudMenuItem>
                        <MudMenuItem @onclick="@(() => Delete(@context))">删除</MudMenuItem>
                    </MudMenu>
      
            </MudTd>
        </RowTemplate>
 
        <PagerContent>
         @*   <TablePager />*@
        </PagerContent>
    </MudTable>
}
@*    <FooterContent>
            <MudSwitch @bind-Checked="@_dense" Color="Color.Secondary" Style="margin-left: 5px;">@_localizer["Dense"]</MudSwitch>
            <MudSwitch @bind-Checked="@_striped" Color="Color.Tertiary" Style="margin-left: 5px;">@_localizer["Striped"]</MudSwitch>
            <MudSwitch @bind-Checked="@_bordered" Color="Color.Warning" Style="margin-left: 5px;">@_localizer["Bordered"]</MudSwitch>
        </FooterContent>*@
            
@code
{

    bool _canViewRoleClaims = true;
    bool _canEditRoles = true;
    bool _canDeleteRoles = true;
    private string  _searchString;

    private List<WtdlRole> WtdlRoles { set; get; } = new List<WtdlRole>();

    [Inject] private  AccountService Service { set; get; }



    protected override async Task OnInitializedAsync()
    {
        await GetRolesAsync();
    }

    private async Task GetRolesAsync()
    {
        var response = await Service.GetAllRolesAsync();
        if (response.IsSuccess)
        {
            WtdlRoles = response.Data;
        }
        else
        {
            _snackBar.Add(response.Message, Severity.Error);
        }
    }



    private async Task InvokeModal(WtdlRole role ,AtionType ationType =AtionType.Create)
    {

        if (role is not null)
        {
            if (role.Name == BaseRole.Aministrator || role.Name == BaseRole.Basic)
            {
                _snackBar.Add($"角色{role.Name} 不允许编辑 ", Severity.Warning);
                return;
            }
        }

        var parameters = new DialogParameters();
        parameters.Add(nameof(RoleModal.ationtype), ationType);
        switch (ationType)
        {
           
                case AtionType.Update:
                   // var  _role = WtdlRoles.FirstOrDefault(c => c.Id == id);
                if (role != null)
                    {
                        parameters.Add(nameof(RoleModal.aoleModel), role);
                    }
                break;
        }

        var tite = AtionType.Create == ationType ? "新建" : "编辑";
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<RoleModal>(tite, parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
           // var add result.Data as WtdlRole;
            await GetRolesAsync();

        }
    }

    private bool Search(WtdlRole role)
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;
        if (role.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        if (role.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
        {
            return true;
        }
        return false;
    }

    private Task ManagePermissions(string contextId)
    {
        throw new NotImplementedException();
    }



    private async Task Delete(WtdlRole role)
    {
        if (role.Name == BaseRole.Aministrator || role.Name == BaseRole.Basic)
        {
            _snackBar.Add($"角色{role.Name} 不允许删除 ", Severity.Warning);
            return;
        }
        string deleteContent = $"确定是否需要删除这个角色[{role.Name}]? ID:{role.Id}";
        var parameters = new DialogParameters
        {
            {nameof(DeleteConfirmation.ContentText), deleteContent}
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = _dialogService.Show<DeleteConfirmation>("删除", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var deleteresult = await Service.DeleteRoleAsync(role);

            if (deleteresult)
            {

                WtdlRoles.Remove(role);
                _snackBar.Add($"角色{role.Name} 删除成功 ", Severity.Success);
            
            }
            else
            {
                _snackBar.Add($"角色{role.Name} 删除失败 ", Severity.Error);
            }

            StateHasChanged();
            return;
        }
    }


}
