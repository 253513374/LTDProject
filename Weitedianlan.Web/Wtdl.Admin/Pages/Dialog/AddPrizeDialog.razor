
@inject PrizeRepository _prizeRepository
@inject ISnackbar Snackbar


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h3">@ContentTitle</MudText>
    </TitleContent>
    
    <DialogContent>
       
        <MudForm   Model="@AddPrize" @ref="@form" Validation="@(FluentValidator.ValidateValue)" ValidationDelay="0">
            
            <MudStack Spacing="5">

                <MudStack Row="true" Spacing="4">
                    <MudPaper Height="240" Width="70%" Elevation="0">
                        <MudStack  Spacing="4">
                            <MudTextField Variant="Variant.Outlined" Label="奖品名称" @bind-Value="AddPrize.Name" For="() => AddPrize.Name"></MudTextField>
                            <MudSelect Variant="Variant.Outlined" Label="奖品类型" @bind-Value="AddPrize.Type" For="() => AddPrize.Type">
                                <MudSelectItem Value="PrizeType.Cash">现金红包</MudSelectItem>
                                <MudSelectItem Value="PrizeType.Physical">实物奖品</MudSelectItem>
                            </MudSelect>
                            @if (AddPrize.Type == PrizeType.Cash)
                            {

                                <MudTextField Variant="Variant.Outlined" 
                                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                           AdornmentColor="Color.Warning"
                                          HelperText="@($"输入的金额为：{((double)AddPrize.CashValue)/100}元")" Label="固定金额（分）" @bind-Value="AddPrize.CashValue" For="() => AddPrize.CashValue"></MudTextField>
                          @*      <MudStack Row="true" Spacing="4">
                                    <MudTextField Variant="Variant.Outlined" HelperText="温馨提示，金额不可设置太大" Label="最小金额" @bind-Value="AddPrize.MinCashValue" For="() => AddPrize.MinCashValue"></MudTextField>
                                    <MudTextField Variant="Variant.Outlined" Label="最大金额" @bind-Value="AddPrize.MaxCashValue" For="() => AddPrize.MaxCashValue"></MudTextField>
                                </MudStack>*@
                            }
                        </MudStack>
                    </MudPaper>
                    <MudPaper Width="30%" Elevation="0">
                        <FileUpImageComponent @ref="@fileform" OnImageFileCallback="@UpFileImage" />
                    </MudPaper>
                </MudStack>
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                    <MudText Typo="Typo.h6">奖品状态：</MudText>
                    <MudSwitch @bind-Checked="AddPrize.IsActive" Color="Color.Error" For="() => AddPrize.IsActive"> 奖品:@(AddPrize.IsActive ? "启用" : "禁用")</MudSwitch>
                </MudStack>
                <MudStack Row="true" Spacing="5">
                   @* <MudTextField Variant="Variant.Outlined" Label="奖品数量" @bind-Value="AddPrize.Amount" For="() => AddPrize.Amount"></MudTextField>*@
                    <MudTextField Variant="Variant.Outlined" Label="中奖概率" @bind-Value="AddPrize.Probability" For="() => AddPrize.Probability"></MudTextField>
                </MudStack>
                <MudTextField Lines="3" Variant="Variant.Outlined" Label="奖品详细描述" @bind-Value="AddPrize.Description" For="() => AddPrize.Description"></MudTextField>

            </MudStack>
           

        </MudForm>
       
    </DialogContent>
   
    <DialogActions>
        <MudStack Class="my-5 mx-10" Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
            <MudButton Variant="Variant.Text" Color="Color.Dark" OnClick="Cancel">取消</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="@(async ()=> await HandleValidSubmit())"  Color="Color.Primary">保存</MudButton>
        </MudStack>
    </DialogActions>
   
</MudDialog>
@code {

    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ContentTitle { get; set; }
   // private string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-2  mud-width-full mud-height-full z-10";
 

    private Prize AddPrize { set; get; } 
    private PrizeFluentValidator FluentValidator = new PrizeFluentValidator();

    
    private MudForm form;
    private FileUpImageComponent fileform;

    void Cancel() => MudDialog.Cancel();

    protected override Task OnInitializedAsync()
    {
        AddPrize = new Prize();
        return base.OnInitializedAsync();
    }
    
    private async Task HandleValidSubmit()
    {
        await form.Validate();
        await fileform.FileMudForm.Validate();
        if (form.IsValid && fileform.FileMudForm.IsValid)
        {
            var prize = form.Model as Prize;
            var username = AuthenticationStateTask.Result.User.Identity.Name;
            prize.AdminUser = username;

            var result = await _prizeRepository.AddAsync(prize);
            if (result > 0)
            {
                Snackbar.Add($"奖品 {prize.Name} 添加成功", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add($"奖品 {prize.Name} 添加失败", Severity.Error);
            }
        }
    }


    private Task UpFileImage(string arg)
    {
        AddPrize.ImageUrl = arg;
        return  Task.CompletedTask;
    }

}