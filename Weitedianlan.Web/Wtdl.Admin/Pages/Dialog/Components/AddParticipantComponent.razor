

@inject PrizeRepository  _PrizeRepository
@inject IDialogService DialogService


    <MudDropContainer T="Prize" DraggingClass="mud-alert-text-warning" ItemDraggingClass="mud-alert-text-warning" Items="Prizes" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" NoDropClass="mud-border-error" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudDropZone T="Prize" Identifier="Not Active" DraggingClass="mud-alert-text-info" ItemDraggingClass="mud-alert-text-info" Class="rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8">
                <MudText Typo="Typo.h6" Class="mb-4">奖品池</MudText>
            </MudDropZone>
            <MudDropZone T="Prize" Identifier="Active" Class="rounded-lg border-2 border-dashed mud-border-lines-default pa-6 ma-8 flex-grow-1">
                <MudText Typo="Typo.h6" Class="mb-4">参与活动奖品</MudText>
            </MudDropZone>
        </ChildContent>
        <ItemRenderer>
            <div class="mud-elevation-25 pa-4 my-4">@context.Name</div>
        </ItemRenderer>
    </MudDropContainer>



@code {


  
    [Parameter]
    public EventCallback<ActivityPrize> AddOptionCallback { set; get; }

    [Parameter]
    public EventCallback<ActivityPrize> RemoveOptionCallback { set; get; }

    private IEnumerable<Prize> Prizes;

    protected override async Task OnInitializedAsync()
    {

        Prizes = await _PrizeRepository.FindAsync(f => f.IsJoinActivity == false);
        
        Parallel.ForEach(Prizes, prize =>
        {
            prize.Identifier = "Not Active";
        });
        
    }

    private async Task  ItemUpdated(MudItemDropInfo<Prize> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
        DialogOptions dialogOptions = new() { FullWidth = true,MaxWidth = MaxWidth.Small};

        var activityprize = GlobalUtility.MapperToActivityPrize(dropItem.Item);
        if (dropItem.DropzoneIdentifier == "Active")
        {
           // visible = true;
            var resultdialog = await DialogService.ShowAsync<EditPrizeCountDialog>("Confirm", dialogOptions);
            var result = await resultdialog.Result;
        
            if (!result.Canceled)
            {
                activityprize.Amount = (int)result.Data;
               
                await AddOptionCallback.InvokeAsync(activityprize);
    // Prizes = await _prizeRepository.GetLatestRecordsAsync(100);
            }
            
        }

        if (dropItem.DropzoneIdentifier == "Not Active")
        {
            await RemoveOptionCallback.InvokeAsync(activityprize);
        }
    }

}
