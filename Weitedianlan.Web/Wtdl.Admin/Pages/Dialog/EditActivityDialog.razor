@inject LotteryActivityRepository _ActivityRepository
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h3">@ContentTitle</MudText>
    </TitleContent>

    <DialogContent>
        <MudContainer Style="max-height: 600px; overflow-y: scroll">
            <MudForm Model="UplotteryActivity" @ref="@mudForm" Validation="@(ActivityValidator.ValidateValue)" ValidationDelay="0">
                <MudStack Justify="Justify.FlexStart" Spacing="4">
                    <MudStack Row="true" Spacing="5">
                        <MudPaper Width="70%" Elevation="0">
                            <MudTextField Variant="Variant.Outlined" Label="活动名称" @bind-Value="UplotteryActivity.Name" />
                            <MudTextField Class="mt-5" Lines="5" Variant="Variant.Outlined" Label="活动描述" @bind-Value="UplotteryActivity.Description" />
                        </MudPaper>
                        <MudPaper Width="30%" Elevation="0">
                            <FileUpImageComponent @ref="@fileform" ImageBase64="@UplotteryActivity.ActivityImage" OnImageFileCallback="@UpFileImage" />
                        </MudPaper>
                    </MudStack>
                    <MudStack Row="true">
                        <MudSwitch Label="立即激活活动" @bind-Checked="@UplotteryActivity.IsActive" Color="Color.Primary" UnCheckedColor="Color.Dark" />
                        <MudSwitch Label="允许重复中奖" @bind-Checked="UplotteryActivity.AllowDuplicate" Color="Color.Primary" UnCheckedColor="Color.Dark" />
                        <MudSwitch Label="允许多次中奖" @bind-Checked="UplotteryActivity.AllowMultipleWinning" Color="Color.Primary" UnCheckedColor="Color.Dark" />
                    </MudStack>

                    <MudStack Row="true">
                        <MudDatePicker Variant="Variant.Outlined" Label="活动开始时间" @bind-Date="UplotteryActivity.StartTime" />
                        <MudDatePicker Variant="Variant.Outlined" Label="活动结束时间" @bind-Date="UplotteryActivity.EndTime" />
                    </MudStack>
                    <AddParticipantComponent IsDisable="@IsDisable" ActivityPrizes="@UplotteryActivity.Prizes" RemoveOptionCallback="@RemoveOptionActive" AddOptionCallback="@AddOptionActive"></AddParticipantComponent>
                </MudStack>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudStack Class="my-5 mx-10" Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
            <MudButton Variant="Variant.Text" Color="Color.Dark" OnClick="@(()=>MudDialog.Cancel())">取消</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="@(async ()=> await HandleValidSubmit())" Color="Color.Primary">保存</MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>




@code {


    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ContentTitle { get; set; }


    
    [Parameter] public LotteryActivity UplotteryActivity { get; set; } = new();
    
    [Parameter]
    public bool IsDisable { get; set; }

    private LotteryActivityValidator ActivityValidator = new();

    private MudForm mudForm;
    private FileUpImageComponent fileform;

    //private string ImageBase64 { set; get; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit()
    {
        await mudForm.Validate();
        await fileform.FileMudForm.Validate();
        if (mudForm.IsValid && fileform.FileMudForm.IsValid)
        {

            var lotteryActivity = mudForm.Model as LotteryActivity;
            var username = AuthenticationStateTask.Result.User.Identity.Name;
            lotteryActivity.AdminUser = username;
            var result = await _ActivityRepository.UpdateAsync(lotteryActivity);
            if (result > 0)
            {
                Snackbar.Add($"活动【 {lotteryActivity.Name} 】编辑成功", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add($"活动【 {lotteryActivity.Name} 】编辑失败", Severity.Error);
            }

            return;
        }
    }

    private Task UpFileImage(string arg)
    {
        UplotteryActivity.ActivityImage = arg;
        return Task.CompletedTask;
        //throw new NotImplementedException();
    }

    private Task AddOptionActive(ActivityPrize arg)
    {
        UplotteryActivity.Prizes.Add(arg);
        return Task.CompletedTask;
    }

    private Task RemoveOptionActive(ActivityPrize arg)
    {
        UplotteryActivity.Prizes.Remove(arg);
        return Task.CompletedTask;
    }

}

