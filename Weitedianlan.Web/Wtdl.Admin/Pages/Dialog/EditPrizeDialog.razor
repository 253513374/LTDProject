
@using Wtdl.Admin.Utility

@inject PrizeRepository _prizeRepository
@inject NavigationManager _navigationManager
@inject ISnackbar Snackbar


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h3">@ContentTitle</MudText>
    </TitleContent>

    <DialogContent>

        <MudForm Model="@UpPrize" @ref="@form" Validation="@(FluentValidator.ValidateValue)" ValidationDelay="0">

            <MudStack Spacing="5">

                <MudStack Row="true" Spacing="4">
                    <MudPaper Height="240" Width="70%" Elevation="0">
                        <MudTextField Variant="Variant.Outlined" Label="奖品名称" @bind-Value="UpPrize.Name" For="() => UpPrize.Name"></MudTextField>
                        <MudSelect Variant="Variant.Outlined" Label="奖品类型" @bind-Value="UpPrize.Type" For="() => UpPrize.Type">
                            <MudSelectItem Value="PrizeType.Cash">现金红包</MudSelectItem>
                            <MudSelectItem Value="PrizeType.Physical">实物奖品</MudSelectItem>
                        </MudSelect>
                        @if (UpPrize.Type == PrizeType.Cash)
                        {

                            <MudTextField Variant="Variant.Outlined" Label="固定金额" @bind-Value="UpPrize.CashValue" For="() => UpPrize.CashValue"></MudTextField>
                            <MudStack Row="true" Spacing="4">
                                <MudTextField Variant="Variant.Outlined" HelperText="温馨提示，金额不可设置太大" Label="最小金额" @bind-Value="UpPrize.MinCashValue" For="() => UpPrize.MinCashValue"></MudTextField>
                                <MudTextField Variant="Variant.Outlined" Label="最大金额" @bind-Value="UpPrize.MaxCashValue" For="() => UpPrize.MaxCashValue"></MudTextField>
                            </MudStack>
                        }

                    </MudPaper>
                    <MudPaper Width="30%" Elevation="0">
                        <FileUpImageComponent @ref="@fileform" ImageBase64 ="@UpPrize.ImageUrl" OnImageFileCallback="@UpFileImage" />
                    </MudPaper>
                </MudStack>
                <MudStack Spacing="2" Row="true" AlignItems="AlignItems.End" Justify="Justify.FlexStart">
                    <MudText Typo="Typo.h6">奖品状态：</MudText>
                    <MudSwitch @bind-Checked="UpPrize.IsActive" Color="Color.Error" For="() => UpPrize.IsActive"> 奖品:@(UpPrize.IsActive ? "启用" : "禁用")</MudSwitch>
                    </MudStack>
                    <MudStack Row="true" Spacing="5">
                        <MudTextField Variant="Variant.Outlined" Label="奖品数量" @bind-Value="UpPrize.Amount" For="() => UpPrize.Amount"></MudTextField>
                        <MudTextField Variant="Variant.Outlined" Label="中奖概率" @bind-Value="UpPrize.Probability" For="() => UpPrize.Probability"></MudTextField>
                    </MudStack>
                    <MudTextField Lines="3" Variant="Variant.Outlined" Label="奖品详细描述" @bind-Value="UpPrize.Description" For="() => UpPrize.Description"></MudTextField>
                </MudStack>
            </MudForm>

        </DialogContent>

        <DialogActions>
            <MudStack Class="my-5 mx-10" Row="true" Justify="Justify.FlexEnd" AlignItems="AlignItems.End">
                <MudButton Variant="Variant.Text" Color="Color.Dark" OnClick="Cancel">取消</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" OnClick="@(async ()=> await HandleValidSubmit())" Color="Color.Primary">保存</MudButton>
            </MudStack>
        </DialogActions>

    </MudDialog>
    @code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ContentTitle { get; set; }

    [Parameter]
    public Prize UpPrize { set; get; }

  //  private FileUploadFluent orderDetailsValidator = new FileUploadFluent();
    public string? UploadedFile { get; set; }
    private MudForm form;
    private FileUpImageComponent fileform;
    private PrizeFluentValidator FluentValidator = new PrizeFluentValidator();
    //private FileUploadFluentValidator UploadFluentValidator = new FileUploadFluentValidator();

    //void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private async Task HandleValidSubmit()
    {

        await form.Validate();
        await fileform.FileMudForm.Validate();
        if (form.IsValid && fileform.FileMudForm.IsValid)
        {
            var result = await _prizeRepository.UpdateAsync(UpPrize);

            if (result > 0)
            {
                Snackbar.Add($"奖品 {UpPrize.Name} 更新成功", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add($"奖品 {UpPrize.Name} 更新失败", Severity.Error);
            }            
        }
    }

        private Task UpFileImage(string arg)
        {
            UpPrize.ImageUrl = arg;//
            return Task.CompletedTask;
        //throw new NotImplementedException();
        }

    }