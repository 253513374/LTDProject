@page "/"
@using Radzen.Blazor
@using Microsoft.AspNetCore.SignalR.Client
@using System.Diagnostics.Contracts
@using Wtdl.Share.SignalR


@inject LotteryRecordRepository _LotteryRecordRepository
@inject WLabelStorageRepository _WLabelStorageRepository
@inject OutStorageRepository _outStorageRepository
@inject RedPacketRecordRepository _redPacketRecordRepository
@inject IMemoryCache _Cache
@inject ILogger<Index> _logger


<MudPageTitle Title="数据面板" Description="系统数据分析统计"></MudPageTitle>

@if(FormsNever is not null)
{

<MudGrid >
        <MudItem xs="12" sm="12" md="6">
            <MudGrid >
                <MudItem style="display: flex; justify-content: center; align-items: center" xs="12" sm="12" md="6">
                    <MudPaper Elevation="20" Style="width:220px;height:220px" Class="ma-5 pa-12 d-flex flex-column align-stretch align-content-center justify-center border-2  mud-border-primary rounded-circle">
                        <div style="display: flex; justify-content: center; align-items: end">
                            <MudIcon Style="Width: 54px; height: 54px;" Icon="@Icons.Material.Outlined.Attractions" Color="Color.Primary"></MudIcon>
                        </div>
                        <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mud-text-secondary  mb-n1">抽奖信息</MudText>
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6" Align="Align.Center" Inline="true">@LotteryCount</MudText>
                            <MudText Typo="Typo.caption">抽奖</MudText>
                        </MudStack>
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6" Align="Align.Center" Inline="true">@LotteryWinCount</MudText>
                            <MudText Typo="Typo.caption">中奖</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem style="display: flex; justify-content: center; align-items: center" xs="12" sm="12" md="6">
                    <MudPaper Elevation="20" Style="width:220px;height:220px" Class="ma-5 pa-12 d-flex flex-column align-stretch align-content-center justify-center border-2  mud-border-primary rounded-circle">
                        <div style="display: flex; justify-content: center; align-items: end">
                            <MudIcon Style="Width: 54px; height: 54px;" Icon="@Icons.Material.Outlined.ViewCarousel" Color="Color.Primary"></MudIcon>
                        </div>
                        <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mud-text-secondary  mb-n1">红包信息</MudText>

                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6" Align="Align.Center" Inline="true">@RedPacketCount</MudText>
                            <MudText Typo="Typo.caption">发放</MudText>
                        </MudStack>
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h6" Align="Align.Center" Inline="true">@TotalAmountSum</MudText>
                            <MudText Typo="Typo.caption">总额</MudText>
                        </MudStack>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="12" md="6" Style="display: flex;align-items: center" Justify="Justify.Center">
            <MudGrid >
                <MudItem xs="12" sm="12" md="6">
                    <MudPaper Elevation="20" Class="d-flex flex-row pt-6 pb-4">
                        <MudIcon Icon="@Icons.Material.Outlined.ShoppingCartCheckout" Color="Color.Primary" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
                        <div style="width: 100%">
                            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">今日出货量</MudText>
                            <MudText Typo="Typo.h5">@OutStorageCount</MudText>
                        </div>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="6">
                    <MudPaper Elevation="20" Class="d-flex flex-row pt-6 pb-4">
                        <MudIcon Icon="@Icons.Material.Outlined.Warehouse" Color="Color.Primary" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
                        <div style="width: 100%">
                            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">今年出货量</MudText>
                            <MudText Typo="Typo.h5">@_Cache.Get(CacheKeys.YearChaeKey)</MudText>
                        </div>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="6">
                    <MudPaper Elevation="20" Class="d-flex flex-row pt-6 pb-4">
                        <MudIcon Icon="@Icons.Material.Outlined.HouseSiding" Color="Color.Primary" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
                        <div style="width: 100%">
                            <MudStack Class="mr-5" Row="true"   AlignItems="AlignItems.End" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">总出货量</MudText>
                            <MudText Typo="Typo.caption" Align="Align.End" Class="mud-text-secondary mb-n1">@FormsNever.RadzenChartTitleText </MudText>
                            </MudStack>
                           
                            <MudText Typo="Typo.h5">@FormsNever.AllYearCount</MudText>
                        </div>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="12" md="6">
                    <MudPaper Elevation="20" Class="d-flex flex-row pt-6 pb-4">
                        <MudIcon Icon="@Icons.Material.Outlined.DocumentScanner" Color="Color.Primary" Class="mx-4" Style="width: 54px; height: 54px;"></MudIcon>
                        <div style="width: 100%">
                            <MudStack Class="mr-5" Row="true"   AlignItems="AlignItems.End" Justify="Justify.SpaceBetween">
                                <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">总订单量</MudText>
                                <MudText Typo="Typo.caption" Align="Align.End" Class="mud-text-secondary mb-n1">@FormsNever.RadzenChartTitleText </MudText>
                            </MudStack>
                           
                            <MudText Typo="Typo.h5">@FormsNever.OrderCount</MudText>
                        </div>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>

    }

<MudStack Class="my-12 " >
    @if (isgetyear)
    {
        <MudPaper Elevation="0" Class="pa-8">
            <MudText Typo="Typo.h6">@FormsNever.RadzenChartTitleText 销量分析图表 </MudText>

            <MudPaper Height="55px" Elevation="5" Class="pa-3 mx-5"   Style="display: flex; align-items: center; gap: 0.5rem">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="平滑" For="smooth" Style="margin-right: 1rem;" />
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="数据标签" For="dataLabels" />
            </MudPaper>
            <RadzenChart>
                <RadzenAreaSeries Smooth="@smooth" Data="@FormsNever.GroupByYearCounts" Title="年总销量"  LineType="LineType.Solid"
                                  CategoryProperty="Year"  ValueProperty="Count" RenderingOrder="1">
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    <RadzenGridLines Visible="true" />
                    <RadzenLegend Position="LegendPosition.Top" />
                </RadzenAreaSeries>
            </RadzenChart>
        </MudPaper>
        <MudPaper Elevation="0" Class="pa-8">
            <MudText Typo="Typo.h6">@FormsNever.RadzenChartTitleText  订单分析图表 </MudText>

            <RadzenCard class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem">
                <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                <RadzenLabel Text="平滑" For="smooth" Style="margin-right: 1rem;" />
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="数据标签" For="dataLabels" />
            </RadzenCard>
            <RadzenChart>
                <RadzenAreaSeries Smooth="@smooth" Data="@FormsNever.GroupByOrderCounts"
                              CategoryProperty="Year"   ValueProperty="Count" 
                                  LineType="LineType.Dotted" Title="订单总量">
                    <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    <RadzenGridLines Visible="true" />
                    <RadzenLegend Position="LegendPosition.Top" />
                </RadzenAreaSeries>
            </RadzenChart>
        </MudPaper>
    }
    else
    {
        <MudSkeletonComponent></MudSkeletonComponent>
    }
</MudStack>


@*<PageTitle>Index</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>
<MudText Class="mb-8">Welcome to your new app, powered by MudBlazor!</MudText>
<MudAlert Severity="Severity.Normal">You can find documentation and examples on our website here: <MudLink Href="https://mudblazor.com" Typo="Typo.body2" Color="Color.Inherit"><b>www.mudblazor.com</b></MudLink></MudAlert>
*@
@code
{


    private bool isgetyear = false;
    private bool isgetorder = false;

  
    private int OutStorageCount { set; get; }//今日出库数量
    private int LotteryWinCount { get; set; }//中奖数量
    private int LotteryCount { get; set; }//抽奖数量

    private int RedPacketCount { get; set; }//红包发放数量
    private int TotalAmountSum { get; set; }//红包发放金额

    bool smooth = true;
    bool showDataLabels = true;
    private readonly object _cacheLock = new object();


    [CascadingParameter]
    private  HubConnection hubConnection { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> auTask { get; set; }

    private ReportFormsNever FormsNever;

    [Inject] private AccountService Service { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if (auTask.Result.User is not null )
        {
            var claims = auTask.Result.User.Claims.ToList();
            var token = Service.GenerateJwtToken(claims);
            hubConnection = hubConnection.TryInitialize(_navigationManager, token);

            hubConnection.On<int>(HubClientMethods.OnOutStorageDayCount, (count) =>
            {
                OutStorageCount = count;
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<int>(HubClientMethods.OnRedPackedCount, (count) =>
            {
                RedPacketCount = count;
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<int>(HubClientMethods.OnRedpacketTotalAmount, (count) =>
            {
                TotalAmountSum = count;
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<int>(HubClientMethods.OnLotteryCount, (count) =>
            {
                LotteryCount = count;
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<int>(HubClientMethods.OnLotteryWinCount, (count) =>
            {
                //中奖人数
                LotteryWinCount = count;
                InvokeAsync(StateHasChanged);
            });
            await hubConnection.StartAsync();
        }
        if (FormsNever is null)
        {
            FormsNever = new ReportFormsNever();
        }
        await GetAllYearCountAsync();
        await LoadCache();

    // await GetOrderNumberAsync();
    }

    private  async Task GetAllYearCountAsync()
    {
        var cacheKey = $"ReportFormsNever{DateTime.Now.Year}";

        if (!_Cache.TryGetValue(cacheKey, out FormsNever))
        {
            var cacheOptions = new MemoryCacheEntryOptions
                {
                    AbsoluteExpiration = new DateTimeOffset(DateTime.Now.AddYears(1).Year, 1, 1, 0, 0, 0, TimeSpan.Zero)
                };
            FormsNever = await GetDataFromStorage();
            _Cache.Set(cacheKey, FormsNever, cacheOptions);
        }

        LotteryCount      = await _LotteryRecordRepository.GetLotteryRecordsCountAsync();
        LotteryWinCount   = await _LotteryRecordRepository.GetLotteryWinRecordsCountAsync();
        RedPacketCount    = await _redPacketRecordRepository.GetRedPacketRecordsCountAsync();
        TotalAmountSum    = (int) await _redPacketRecordRepository.GetRedPacketRecordsTotalAmountAsync();
        OutStorageCount = await _WLabelStorageRepository.GetTodayOutCountAsync(); 

        isgetyear = true;
    }

    private async Task<ReportFormsNever> GetDataFromStorage()
    {

        var formsNever = new ReportFormsNever();
      
        formsNever.GroupByOrderCounts = await _outStorageRepository.GetGrapByYearAndOrderAsync();

        if (formsNever.GroupByOrderCounts is null || formsNever.GroupByOrderCounts.Count == 0)
        {
            formsNever.GroupByOrderCounts = await _WLabelStorageRepository.GetGroupByOrderNumbelsAsync(DateTime.Now.Year);
        }

        var groupbyyearorders = await _outStorageRepository.GetGrapByYearAsync();
        formsNever.GroupByYearCounts = groupbyyearorders.GroupBy(g => g.Year).Select(s =>
            new OutStorageAnalysis
                {
                    Year = s.Key,
                    Count = s.Sum(s => s.Count),
                }).ToList();

      
      
        return formsNever;
    }
    




    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    private Task LoadCache()
    {
        var now = DateTime.Now;
        var timeToMidnight = new TimeSpan(24, 0, 0) - now.TimeOfDay;
        var options = new MemoryCacheEntryOptions()
            .SetAbsoluteExpiration(timeToMidnight);

        lock (_cacheLock)
        {

            int counter;
            if (!_Cache.TryGetValue(CacheKeys.DayCacheKey, out counter))
            {
              //  _logger.LogInformation("Index从数据库获取数据");
 
                counter = _WLabelStorageRepository.GetCount();
                _Cache.Set(CacheKeys.DayCacheKey, counter);
               // _logger.LogInformation("Index从数据库获取数据完成");
            }
            OutStorageCount = counter;

    //var newValue = Interlocked.Increment(ref counter);
    //_Cache.Set(CacheKeys.DayCacheKey, newValue, options);
        }

        return Task.CompletedTask;
    }



}
