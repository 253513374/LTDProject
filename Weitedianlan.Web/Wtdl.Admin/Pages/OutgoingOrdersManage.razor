
@page "/outgoingordersmanage"
@using Wtdl.Repository.Data


@attribute [Authorize(Policy = Permissions.ScanOuts.ScanOutView)]

@inject WLabelStorageRepository _labelStorageRepository
@inject IDialogService DialogService


<MudPageTitle Title="出库单数据" Description="最新出库单扫码出库记录"></MudPageTitle>

@if (labelStorages is null)
{

    <MudSkeletonComponent></MudSkeletonComponent>
}
else
{


@* 出库单管理页面 *@
    <MudPaper Height="400" Elevation="0" Style="max-height: 600px; position: relative;">
        
        
        
        <MudStack Class="my-5" Row="true"  >
            <MudDateRangePicker   @ref="_picker" Label="查询时间范围" @bind-DateRange="_dateRange" AutoClose="false">
                <PickerActions>
                    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">清除</MudButton>
                    <MudButton OnClick="@(() => _picker.Close(false))">取消</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(async () => await OnDateRangePickerOk())">确定</MudButton>
                </PickerActions>
            </MudDateRangePicker>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
        </MudStack>
        <MudTable Items="labelStorages" Class="mud-table-responsive"
                  Filter="new Func<GroupByWLabelStorage, bool>(FilterFunc1)"
                  Dense="true" Striped="true" Hover="true" Bordered="true">
            <ToolBarContent>
                <MudText Typo="Typo.h5">扫码出库数据</MudText>
                <MudSpacer></MudSpacer>
                <MudSpacer></MudSpacer>
                <MudSpacer></MudSpacer>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>

                <MudTh>出库单号</MudTh>
                <MudTh> <MudTableSortLabel SortBy="new Func<GroupByWLabelStorage, object>(x => x.Count)" T="GroupByWLabelStorage">出库数量</MudTableSortLabel></MudTh>
                <MudTh> <MudTableSortLabel SortBy="new Func<GroupByWLabelStorage, object>(x => x.OrderNumbels)" T="GroupByWLabelStorage">出库单时间</MudTableSortLabel></MudTh>
                <MudTh>客户名称</MudTh>
                <MudTh>功能操作</MudTh>
            </HeaderContent>
            <RowTemplate >

                <MudTd DataLabel="出库单号">@context.OrderNumbels</MudTd>
                <MudTd DataLabel="出库数量">@context.Count</MudTd>
                <MudTd DataLabel="出库单时间">@context.Time</MudTd>
                <MudTd DataLabel="客户名称">@context.AgentName</MudTd>
                <MudTd DataLabel="功能">
                    <MudStack Row="true">
                        <MudButton Style="Width: 80px" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => OnViewDetails(context.OrderNumbels))">详细数据</MudButton>
                    </MudStack>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    </MudPaper>
}
@code {
    
    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date);

    private List<GroupByWLabelStorage> labelStorages;

    private string searchString;
    private async Task OnViewDetails(string ordernumbels)
    {
        var parameters = new DialogParameters();

    // parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ContentTitle", "详细信息");

        parameters.Add("OrderNumbels", ordernumbels);
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var resultdialog = await  DialogService.ShowAsync<OutViewDetailsDialog>("出单单详细数据", parameters, options);

        var result = await resultdialog.Result;
        
        if (!result.Canceled)
        {
           // Prizes = await _prizeRepository.GetLatestRecordsAsync(100);
        }
        //throw new NotImplementedException();
    }

    protected override async Task OnInitializedAsync()
    {
        labelStorages = await _labelStorageRepository.GetLatestGroupByTimeRecordsAsync();
        return;// base.OnInitializedAsync();
    }
    private bool FilterFunc1(GroupByWLabelStorage element) => FilterFunc(element, searchString);

    private bool FilterFunc(GroupByWLabelStorage element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.OrderNumbels is not null)
        {
            if (element.OrderNumbels.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (element.AgentName is not null)
        {
            if (element.AgentName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (element.Count>=0)
        {
            if (element.Count.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }

       
        //if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        if ($"{element.OrderNumbels} {element.AgentName}".Contains(searchString))
            return true;

        return false;
    }



    private async Task OnDateRangePickerOk()
    {
        labelStorages = null;
        _picker.Close();
        labelStorages = await _labelStorageRepository.GetGroupByTimeRecordsAsync(_dateRange.Start.Value, _dateRange.End.Value);
        return; 
    }
}
