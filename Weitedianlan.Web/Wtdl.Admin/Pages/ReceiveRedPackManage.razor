@page "/receiveredpackmanage"


@attribute [Authorize(Policy = Permissions.RedPackets.RedPacketGiveOutView)]
@inject RedPacketRecordRepository _PacketRecordRepository


<MudPageTitle Title="红包发放" Description="微信扫码得红包发放记录"></MudPageTitle>

@if (PacketRecords is null)
{

    <MudSkeletonComponent></MudSkeletonComponent>
}
else
{

@*    ServerData = "@(new Func<TableState, Task<TableData<RedPacketRecord>>>(ServerReload))"*@

    <MudStack Class="my-5" Row="true"  >
        <MudDateRangePicker   @ref="_picker" Label="查询时间范围" @bind-DateRange="_dateRange" AutoClose="false">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">清除</MudButton>
                <MudButton OnClick="@(() => _picker.Close(false))">取消</MudButton>
                <MudButton Color="Color.Primary" OnClick="@(async () => await OnDateRangePickerOk())">确定</MudButton>
            </PickerActions>
        </MudDateRangePicker>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
        <MudSpacer></MudSpacer>
    </MudStack>

    <MudTable Items="@PacketRecords"
          Filter="new Func<RedPacketRecord, bool>(FilterFunc1)"
              Dense="true" Striped="true" @ref="@_table">
        <ToolBarContent>
            
            <MudButton Color="Color.Primary" OnClick="@(async () => await LoadData())" StartIcon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled">重新加载</MudButton>
            <MudButton Class="mx-3" Color="Color.Primary" OnClick="@(async () => await ExportToExcel())" StartIcon="@Icons.Material.Filled.ImportExport" Variant="Variant.Text">导出Excel</MudButton>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudTextField T="string" @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

           @* <MudText Typo="Typo.h6">红包领取记录</MudText>
            <MudSpacer/>
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>微信OpenID</MudTh>
            <MudTh>订单号</MudTh>
            <MudTh>标签序号</MudTh>
            <MudTh>验证码</MudTh>
            <MudTh>红包金额</MudTh>
            <MudTh>发放时间</MudTh>
            @*      <MudTh>奖品描述</MudTh>
        <MudTh>奖品图片</MudTh>
        <MudTh>功能</MudTh>*@
        </HeaderContent>
        <RowTemplate Context="prize">

            @*       <MudTd>
        <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small" OnClick="@(() => OnToggledChanged(prize))">@(prize.IsActive ? "已激活" : "未激活")</MudButton>
        </MudTd>*@
            <MudTd>@prize.ReOpenId</MudTd>
            <MudTd>@prize.MchbillNo</MudTd>
            <MudTd>@prize.QrCode</MudTd>
            <MudTd>@prize.Captcha</MudTd>
            <MudTd>@prize.TotalAmount</MudTd>
            <MudTd>@prize.IssueTime</MudTd>

            @*          <MudTd>
        <MudStack Row="true" Spacing="1">
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => OnEditPrize(prize))">编辑</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => OnDeletePrize(prize))">删除</MudButton>

        </MudStack>
        </MudTd>*@
        </RowTemplate>
        <PagerContent>
            <MudStack Spacing="3" Class="my-5" Justify="Justify.SpaceAround">
                <MudText Typo="Typo.button">@($"总数：{PacketRecords.Count()} ")</MudText>
                <MudPagination Style="justify-content: end" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4"/>
            </MudStack>
        </PagerContent>
    </MudTable>
}
@code {

    private MudDateRangePicker _picker;
    private DateRange _dateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date);

    private MudTable<RedPacketRecord> _table;

    private IEnumerable<RedPacketRecord> PacketRecords { set; get; }

   // private MudTable<RedPacketRecord> mtable;
    //private MudTable<Element> table;
    private string searchString = null;
    private int redPacketRecordCunt;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
    //PacketRecords = await _PacketRecordRepository.FindAsync(f=>f.CreateTime>=DateTime.Now.Date.AddDays(-90));
    //StateHasChanged();
        }
        return;// base.OnAfterRenderAsync(firstRender);
    }


    //private async Task<TableData<RedPacketRecord>> ServerReload(TableState state)
    //{
    //    var datalist = await _PacketRecordRepository.GetAllAsync();
    //    datalist = datalist.Where(element =>
    //    {
    //        if (string.IsNullOrWhiteSpace(searchString))
    //            return true;
    //        if (element.ReOpenId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //            return true;
    //        if (element.Captcha.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //            return true;

    //        if (element.QrCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //            return true;

    //        if (element.TotalAmount.Contains(searchString, StringComparison.OrdinalIgnoreCase))
    //            return true;


    //        if ($"{element.ReOpenId} {element.Captcha} {element.QrCode}".Contains(searchString))
    //            return true;
    //        return false;
    //    }).ToArray();
    //    redPacketRecordCunt = datalist.Count();
    //    switch (state.SortLabel)
    //    {
    //        case "QrCode":
    //            datalist = datalist.OrderByDirection(state.SortDirection, o => o.QrCode);
    //            break;
    //        case "CreateTime":
    //            datalist = datalist.OrderByDirection(state.SortDirection, o => o.CreateTime);
    //            break;
    //        case "CashAmount":
    //            datalist = datalist.OrderByDirection(state.SortDirection, o => o.CashAmount);
    //            break;
    //        case "MchbillNo":
    //            datalist = datalist.OrderByDirection(state.SortDirection, o => o.MchbillNo);
    //            break;
    //        case "mass_field":
    //            break;
    //    }
    //    PacketRecords = datalist.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
    //    return new TableData<RedPacketRecord>() { TotalItems = redPacketRecordCunt, Items = PacketRecords };

    //}
    //private Task OnSearch(string text)
    //{
    //    searchString = text;
    //    _table.ReloadServerData();
    //    return Task.CompletedTask;
    //}

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    private bool FilterFunc1(RedPacketRecord element) => FilterFunc(element, searchString);

    private bool FilterFunc(RedPacketRecord element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }
               
        if (element.ReOpenId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Captcha.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.QrCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.TotalAmount.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;


        if ($"{element.ReOpenId} {element.Captcha} {element.QrCode}".Contains(searchString))
            return true;
        return false;
    }

    private async Task OnDateRangePickerOk()
    {
        PacketRecords = null;
        _picker.Close();
        PacketRecords = await _PacketRecordRepository.FindAsync(f => f.CreateTime >= _dateRange.Start.Value && f.CreateTime <= _dateRange.End.Value);
        return; 
    }

    private async Task LoadData()
    {
        PacketRecords = await _PacketRecordRepository.FindAsync(f=>f.CreateTime>=DateTime.Now.Date.AddDays(-90));

        if (PacketRecords is not null && PacketRecords.Count()>1)
        {
            _dateRange.Start = PacketRecords.Min(s => s.CreateTime);
            _dateRange.End = PacketRecords.Max(s => s.CreateTime);
        }
        StateHasChanged();
    }

    private async Task ExportToExcel()
    {

        try
        {
            var fielter = _table.FilteredItems;
            if (fielter.Count()!=0)
            {
             
                var excelData = ExportService.ExportToExcel(fielter);
                var browserBase64 = Convert.ToBase64String(excelData);
                var href = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{browserBase64}";
                await _jsRuntime.InvokeVoidAsync("downloadFile", href, $"{nameof(RedPacketRecord).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx");

                _snackBar.Add(string.IsNullOrWhiteSpace(searchString)
                    ? "领红包记录导出"
                    : "领红包记录过滤导出", Severity.Success);
                }
            else
            {
                _snackBar.Add($"领红包记录数据为null", Severity.Warning);
            }
        }
        catch (Exception e)
        {
            _snackBar.Add(e.Message, Severity.Error);
        }
    }
}
