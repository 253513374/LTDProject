@page "/"
@page "/{Id}"

@using System.Text.RegularExpressions
@using Wtdl.Model.ResponseModel
@using System.Text.Json
@using Wtdl.Controller.Models.ResponseModel
@using Wtdl.Model.Entity
@using Wtdl.Wasm.Pages.Debug
@using System.Security.Cryptography

@inherits ComponentBase

@inject IJSRuntime JsRuntime
@inject ILogger<Index> _logger

    

<PageTitle>威特五金</PageTitle>

<Header></Header>

    <MudCard Elevation="0" Style="background-color: transparent;color:#FFFFFE">

        <MudContainer>
            <MudStack Spacing="2" Style="background-color: transparent;">
                <MudText Typo="Typo.body2" Style="font-weight: bold">尊敬的用户：</MudText>
            <MudText Typo="Typo.button" Style="word-wrap: break-word; white-space: pre-wrap;">        您所查询的防伪标签照片如下图所示，请随机抽查标签上的3-5粒亮片，观察其形状、位置、颜色是否与标签上的亮片相符，若相符，则是真品；否则，谨防假冒。（请注意彩色亮片可挑出）!</MudText>
                @if (antiFakeResult is not null && antiFakeResult.AntiFakeByData is not null)
                {
                    <div style="max-width: 85%; margin: 2px auto; text-align: center">
                        <img style="Width: 100%; height: auto; padding: 4px" src="@antiFakeResult.AntiFakeByData.ImgUrl" Alt="图片加载失败..." class="rounded-lg" />
                    </div>

                    <MudStack Class="my-5 mx-0" Spacing="1">

                        <MudStack Class="mx-0" Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">标签序号:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.LabelNum</MudText>
                        </MudStack>
                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">首次查询:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.FirstQueryTime</MudText>
                        </MudStack>
                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">商品名称:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.ProductName</MudText>
                        </MudStack>
                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">纤维特征:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.FibreColor</MudText>
                        </MudStack>
                    </MudStack>
                }
                else
                {
                    <AntiFakeSkeleton></AntiFakeSkeleton>
                }
                
            </MudStack>
            <MudText Class="footertext" Align="Align.Left" Typo="Typo.caption"> 如有疑问，请拨打电话<span class="footertext">400-6800-315</span>详细咨询</MudText>
        </MudContainer>
    </MudCard>


<MudCard Elevation="0" Style="background-color: transparent;color: #FFFFFE;margin-top: 50px">
       
    
    <MudCardHeader><MudText Typo="Typo.h5">溯源信息 </MudText></MudCardHeader>
    @if (traceabilityResult is not null)
        {
            <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelineAlign="TimelineAlign.Start"
                         TimelinePosition="TimelinePosition.Right">
                <MudStack Justify="Justify.FlexStart" Class="ml-3">
                    
                    
                    @if (string.IsNullOrEmpty(traceabilityResult.OrderNumbels))
                    {
                        <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Size="Size.Small" Style="Width: 100%;">
                            <ItemContent>
                                <MudAlert Icon="@Icons.Material.Filled.Warning" Style="background-color: #eea47f">
                                    <MudText  Typo="Typo.button" Align="Align.Left"  Style="word-wrap: break-word;color: #000000;font-weight: 800">标签还未出库</MudText>
                                </MudAlert>
                                
                            </ItemContent>
                        </MudTimelineItem>
                    }
                    else
                    {
                        <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Size="Size.Small" Style="Width: 100%;">
                            <ItemContent>
                                <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                                    <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word; width: 100px;">出库单号:</MudText>
                                    <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word;">@traceabilityResult.OrderNumbels</MudText>
                                </MudStack>
                            </ItemContent>
                        </MudTimelineItem>
                        <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                            <ItemContent>
                                <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart" Style="Width: 100%">
                                    <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word; width: 100px;">出库时间:</MudText>
                                    <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word;">@traceabilityResult.OutTime</MudText>
                                </MudStack>
                            </ItemContent>
                        </MudTimelineItem>
                        <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                            <ItemContent>
                                <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                                    <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word; width: 100px;">供应代理:</MudText>
                                    <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word;">@traceabilityResult.AgentName</MudText>
                                </MudStack>
                            </ItemContent>
                        </MudTimelineItem>
                    }
                </MudStack>
            </MudTimeline>
        }
        else
        {
            <TraceabilitySkeleton></TraceabilitySkeleton>
        }
    </MudCard>
    

<MudButton OnClick="@OpenDialog"> 打开红包对话框</MudButton>

<MudButton OnClick="@OpenLuckyDrawDialog"> 打开抽奖对话框</MudButton>

<footer >
    
    <MudCard Elevation="0" Style=" color: #fffffe;background-color: transparent;border-radius:15px ">
        <MudCardHeader><h2>联系我们</h2></MudCardHeader>
      
        <img class="weixinimg" src="img/weixinlogo2.png" />
        <MudContainer>
            <MudText Class="my-3" Typo="Typo.h6" Style="margin-top: 25px;">全省销售热线</MudText>
            
            <div class="container">
                <div class="box">
                    <span class="title">海口总仓</span>
                    <div>
                        <p>地址：海口市秀英区美安大道8号</p>
                        <strong>电话(微信)：6530 5288</strong>
                        @*<span>VALID</span> <span>01/28</span>*@
                    </div>
                </div>
            </div>
            

            @*            <div class="businesscard">
                <MudStack Spacing="3" Row="true">
                    <MudStack Spacing="0" >
                        <MudImage ObjectFit="ObjectFit.Contain" Src="/img/logo.png" Style="Width:64px"></MudImage>
                        <MudText Typo="Typo.button" Style="font-weight: 800;" Align="Align.Center">海口总仓</MudText>
                    </MudStack>
                    <MudStack Style="align-self: center;" Spacing="1"  >
                        <MudText Typo="Typo.button">地址：海口市秀英区美安大道8号</MudText>
                        <MudText Typo="Typo.button">电话(微信)：65305288</MudText>
                    </MudStack>
                </MudStack>
            </div>*@

            <MudText Class="my-3" Typo="Typo.h6" Style="margin-top: 25px;">区域销售热线</MudText>
            
            <MudStack Spacing="2">
                
                <div class="container">
                    <div class="box">
                        <span class="title">区域范围</span>
                        <div>
                            <p>地址：三亚、陵水、保亭、五指山、乐东</p>
                            <strong>电话(微信)：183 0898 9065</strong>
                            @*<span>VALID</span> <span>01/28</span>*@
                        </div>
                    </div>
                </div>

           @*     <div class="businesscard">
                    <MudStack Spacing="3" Row="true" AlignItems="AlignItems.Center">
                        <MudStack Spacing="0">
                            <MudImage ObjectFit="ObjectFit.Contain" Src="/img/logo.png" Style="Width: 64px"></MudImage>
                            <MudText Typo="Typo.button" Style="font-weight: 800;" Align="Align.Center">区域范围</MudText>
                        </MudStack>
                        <MudStack Style="align-self: center;" Spacing="1">
                            <MudText Typo="Typo.button">地址：三亚、陵水、保亭、五指山、乐东</MudText>
                            <MudText Typo="Typo.button">电话(微信)：18308989065</MudText>
                        </MudStack>
                    </MudStack>
                </div>*@
                
                
                <div class="container">
                    <div class="box">
                        <span class="title">区域范围</span>
                        <div>
                            <p>地址：临高、儋州、昌江、白沙、东方</p>
                            <strong>电话(微信)：183 0898 9063</strong>
                            @*<span>VALID</span> <span>01/28</span>*@
                        </div>
                    </div>
                </div>
           @*              <div class="businesscard">
                    <MudStack Spacing="3" Row="true" AlignItems="AlignItems.Center">
                        <MudStack Spacing="0">
                            <MudImage ObjectFit="ObjectFit.Contain" Src="/img/logo.png" Style="Width: 64px"></MudImage>
                            <MudText Typo="Typo.button" Style="font-weight: 800;" Align="Align.Center">区域范围</MudText>
                        </MudStack>
                        <MudStack Style="align-self: center;" Spacing="1">
                            <MudText Typo="Typo.button">地址：临高、儋州、昌江、白沙、东方</MudText>
                            <MudText Typo="Typo.button">电话(微信)：18308989063</MudText>
                        </MudStack>
                    </MudStack>
                </div>*@
           
           
           <div class="container">
               <div class="box">
                   <span class="title">区域范围</span>
                   <div>
                        <p>地址：定安、文昌、琼海、万宁</p>
                        <strong>电话(微信)：183 0898 9062</strong>
                       @*<span>VALID</span> <span>01/28</span>*@
                   </div>
               </div>
           </div>
          @* <div class="businesscard">
                    <MudStack Spacing="3" Row="true">
                        <MudStack Spacing="0">
                            <MudImage ObjectFit="ObjectFit.Contain" Src="/img/logo.png" Style="Width: 64px"></MudImage>
                            <MudText Typo="Typo.button" Style="font-weight: 800;" Align="Align.Center">区域范围</MudText>
                        </MudStack>
                        <MudStack Style="align-self: center;" Spacing="1">
                            <MudText Typo="Typo.button">地址：定安、文昌、琼海、万宁</MudText>
                            <MudText Typo="Typo.button">电话(微信)：18308989062</MudText>
                        </MudStack>
                    </MudStack>
                </div>*@
            </MudStack>
        </MudContainer>
        <p style="color: gray; margin-top: 20px;justify-content: center">&copy; 2023 chn315.top. 版权所有.</p>
    </MudCard>
</footer>
    




<!-- 遮罩层 -->
<div id="modalOverlay"></div>
<div id="exampleModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header mr-5" style="border: 0px;">
                <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="@CloseDialog" Size="Size.Large" Class="close" aria-label="Close">
                   
                </MudIconButton>
            </div>
            <div class="modal-footer justify-content-center mt-auto" style="border: 0px;">
                @*<button type="button" class="btn btn-secondary" data-dismiss="modal">关闭</button>*@
                
                @if (redStatusResult is not null && redStatusResult.StuteCode == "CAPTCHA")
                {
                    <MudTextField AdornmentColor="Color.Dark" FullWidth="false" Style="background-color: rgba(255,255,255,0.7);color: #50586C" Label="输入验证码领红包" @bind-Value="@captcha" Variant="Variant.Filled"></MudTextField>
                }

                <MudFab Class="keyframesbtn my-3" ButtonType="ButtonType.Button" Label="点击领取" Style="Color:black; background-color: darkkhaki; border: none" OnClick="@SubmitForm">领</MudFab>
            </div>
        </div>
    </div>
</div>

@code
{


    [Parameter]
    public string? Id { set; get; }


    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string? Code { get; set; }


    [Parameter]
    [SupplyParameterFromQuery(Name = "state")]
    public string QRCode { get; set; }


    public string OpenId { set; get; }


    [Inject]
    protected DataStateContainer Container { set; get; }


    private AntiFakeResult antiFakeResult;
    private TraceabilityResult traceabilityResult;

    private string captcha;

    /// <summary>
    /// 抽奖结果
    /// </summary>
    private LotteryResult lotteryResult;

    /// <summary>
    /// 抽奖活动信息
    /// </summary>
    private LotteryActivity lotteryActivity;

    /// <summary>
    /// 当前用户与标签的领取红包的状态
    /// </summary>
    private RedStatusResult redStatusResult;

    /// <summary>
    /// 领取红包的结果
    /// </summary>
    private RedPacketResult redPacketResult;



    DialogParameters parameters = new ();
    JsonSerializerOptions options = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true
    };


    protected override async Task OnParametersSetAsync()
    {

        if (!string.IsNullOrEmpty(QRCode))
        {
            await Container.SetCode(QRCode, "");
        }
        #if DEBUG
            Id = Id ?? "000000000009";
            QRCode = Id;
            await Container.SetCode(QRCode, "");
            // Container.SetCode(QRCode,OpenId);
        #endif
        


    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!string.IsNullOrEmpty(Container.Code))
            {
                OpenId = await GetWeixinUserOpenID(Code);
                //OpenId = "oz0TXwTew5RmbnTa2aeMPfHfsDnY";
              
                antiFakeResult = await GetAntiFakeResultAsync(QRCode);
                traceabilityResult = await GetTraceabilityResultAsync(QRCode);
                var lotteryActivity    = await GetLotteryActivityAsync();

                if (!string.IsNullOrEmpty(OpenId))
                {
                    redStatusResult = await GetRedStatusResultAsync(OpenId, QRCode);

                    if (redStatusResult.IsSuccess)
                    {
                        await OpenDialog();
                    }
                }

                await Container.SetCode(QRCode, OpenId);
                await Container.SetActivity(lotteryActivity);

                StateHasChanged();
            }
        }
    }

    private async Task<string> GetWeixinUserOpenID(string code)
    {

        try
        {
            if (!string.IsNullOrEmpty(code))
            {
                return  await _httpClient.GetStringAsync($"OAuth2/WXLogin?code={code}");
            }
        }
        catch (Exception e)
        {
            _logger.LogError($"微信获取openid异常：{e.Message}");
            throw;
        }

        return "";
    }

    private async Task<AntiFakeResult> GetAntiFakeResultAsync(string qrcode)
    {
        try
        {

            var response = await _httpClient.GetAsync($"AntiFake?qrcode={qrcode}");
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<AntiFakeResult>(stream, options);
            }

            _logger.LogError($"查询防伪信息失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            _logger.LogError($"查询防伪信息异常：{e.Message}");
        }

        return new AntiFakeResult();
    }

    private async Task<TraceabilityResult> GetTraceabilityResultAsync(string qrcode)
    {
        try
        {
            var response = await _httpClient.GetAsync($"Traceability?qrcode={qrcode}");

            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<TraceabilityResult>(stream, options);
            }

            _logger.LogError($"查询防伪信息失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            _logger.LogError($"查询溯源信息异常：{e.Message}");
        }
        return new TraceabilityResult();
    }

    private async Task<RedStatusResult> GetRedStatusResultAsync(string openid , string qrcode)
    {
        try
        {
            var url = $"RedPacket/RedPackStatus?openid={openid}&qrcode={qrcode}";
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<RedStatusResult>(stream, options);
            }

            _logger.LogError($"查询防伪信息失败：{response.StatusCode}");


        }
        catch (Exception e)
        {
            _logger.LogError($"查询领取现金红包异常：{e.Message}");
        }
        return null;
    }

    private async Task<RedPacketResult> GetRedPacketResultQRCodeAsync(string openid, string qrcode)
    {
        try
        {
            //openid = "oz0TXwTew5RmbnTa2aeMPfHfsDnY";
            //qrcode = "143890836071";
            var url = $"RedPacket/QRCode?openid={openid}&qrcode={qrcode}";

            var response =  await _httpClient.PostAsync(url, null);// _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<RedPacketResult>(stream, options);
            }
            _logger.LogError($"二维码领取现金红包失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            parameters.Add("Msg", $"ResultQRCodeAsync异常：{e.Message}");
            await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
            _logger.LogError($"二维码领取现金红包异常：{e.Message}");
        }
        return null;
    }

    private async Task<RedPacketResult> GetRedPacketResultCaptchaAsync(string openid, string qrcode, string captcha)
    {
        try
        {
            var url = $"RedPacket/Captcha?openid={openid}&qrcode={qrcode}&captcha={captcha}";
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<RedPacketResult>(stream, options);
            }
            _logger.LogError($"验证码领取现金红包失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            _logger.LogError($"验证码领取现金红包异常：{e.Message}");
        }
        return null;
    }

    private async Task<ActivityResult> GetLotteryActivityAsync()
    {
        try
        {
            var url = $"LotteryActivity";
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadFromJsonAsync<ActivityResult>();
               // var result= JsonSerializer.Deserialize<LotteryActivity>(stream, options);

                return stream;
            }
            _logger.LogError($"获取抽奖活动信息失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            _logger.LogError($"获取抽奖活动信息异常：{e.Message}");
        }
        return null;
    }

    private async Task OpenLuckyDrawDialog()
    {
        _navigationManager.NavigateTo("/prizesshow");
    }
    private async Task OpenDialog()
    {
        await JsRuntime.InvokeVoidAsync("openDialog");
    }

    private async Task CloseDialog()
    {
        //关闭对话框
        await JsRuntime.InvokeVoidAsync("closeDialog");
        StateHasChanged();
    }

    private async Task SubmitForm()
    {
        // 点击领取红包
    //var parameters = new DialogParameters();
        parameters.Add("Msg", $"OpenId：{OpenId}   QRCode：{QRCode}");
        try
        {

            redPacketResult = await GetRedPacketResultQRCodeAsync(OpenId, QRCode);

            if (redPacketResult.IsSuccess)
            {
                //parameters.Add("Msg", $"redPacketResult：{redPacketResult.IsSuccess}");
                //await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);

                await JsRuntime.InvokeVoidAsync("closeDialog");
            }
            else
            {
                parameters.Add("Msg", $"redPacketResult：{redPacketResult.Message}");
                await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
            }
        }
        catch (Exception e)
        {
            //parameters.Add("Msg", $"异常：{e.StackTrace}");
            //await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
           _logger.LogError(e.Message);
        }
       // await JsRuntime.InvokeVoidAsync("closeDialog");
        StateHasChanged();
    }
}
