@page "/"
@page "/{Id}"

@using System.Text.RegularExpressions
@using Wtdl.Model.ResponseModel
@using System.Text.Json
@using Wtdl.Controller.Models.ResponseModel
@using Wtdl.Model.Entity
@using Wtdl.Wasm.Pages.Debug


@inject IJSRuntime JsRuntime
@inject ILogger<Index> _logger

<style >
    body {
        /*color: rgba(12, 12, 12, 0.5);*/
        
    }

    footer {
        background-color: transparent;
        
        margin: 0 auto;
        width: 100%;
        color: rgb(226,225,228);
       /* color: #e2e1e4*/
        

    }


    ul li span {
        /*color: #EEA47F;*/
        color: rgba(238, 164, 128, 0.9);
    }

    /* 媒体查询：移动设备 */
    @@media screen and (max-width: 767px) {
    li {
        display: block;
    }
        
    }

    /* 媒体查询：桌面设备 */
    @@media screen and (min-width: 768px) {
        ul {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
        }

        li {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
        }
    }

    .modal-dialog {
       
        margin: 0 auto;
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 90%;
        height: 350px; 
        z-index: 1001;
        background-image: url('/img/金币礼盒720.png');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center center;
        background-attachment: fixed;
    }

    .modal-content {
        border: none;
        background-color: transparent;
        width: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
        /*box-shadow: 0 0 10px 10px rgba(0, 0, 0, 0.5);*/
    }

    .modal-header {
        background-color: transparent;
        position: relative;
    }

    .modal-header .close {
        position: absolute;
        top: 0;
        right: 0;
    }

    #modalOverlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* 半透明黑色 */
        display: none; /* 初始隐藏 */
        z-index: 999; /* 放在最上层 */
    }
    .close {
        font-size: 3rem;
        font-weight: bold;
    }


    .keyframesbtn {
        /*2秒动画，无限循环*/
        animation: pulse 2s ease-in-out infinite;
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.2);
        }
        100% {
            transform: scale(1);
        }
    }
    </style >

<PageTitle>威特五金</PageTitle>

@if (!string.IsNullOrEmpty(QRCode))
{




    <MudPaper Elevation="0" Style="background-color: transparent;color:#e2e1e4">

            <SurveyPrompt Title="防伪信息" />

        <MudStack Spacing="2" Style="background-color: transparent;">
                <MudText Typo="Typo.body2" Style="font-weight: bold">尊敬的用户：</MudText>
                <MudText Class="ml-3" Typo="Typo.button" Style="word-wrap: break-word;">您所查询的防伪标签照片如下图所示，请随机抽查标签上的3-5粒亮片，观察其形状、位置、颜色是否与标签上的亮片相符，若相符，则是真品；否则，谨防假冒。（请注意彩色亮片可挑出）!</MudText>
                 <MudButton OnClick="OpenDialog" Color="Color.Primary" >打开对话框</MudButton>


                @if (antiFakeResult is not null && antiFakeResult.AntiFakeByData is not null)
                {
                    <div style="max-width: 85%; margin: 0 auto; text-align: center">
                        <img style="Width: 100%; height: auto; padding: 2px" src="@antiFakeResult.AntiFakeByData.ImgUrl" Alt="Mony the dog" class="rounded-lg"/>
                    </div>

                    <MudStack Class="my-5" Spacing="1">

                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">标签序号:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.LabelNum</MudText>
                        </MudStack>
                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">首次查询:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.FirstQueryTime</MudText>
                        </MudStack>
                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">商品名称:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.ProductName</MudText>
                        </MudStack>
                        <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                            <MudText Typo="Typo.button" Align="Align.Right" Style="word-wrap: break-word; width: 100px;">纤维特征:</MudText>
                            <MudText Typo="Typo.button" Style="word-wrap: break-word;">@antiFakeResult.AntiFakeByData.FibreColor</MudText>
                        </MudStack>
                    </MudStack>
                }
                else
                {
                    <AntiFakeSkeleton></AntiFakeSkeleton>
                }
            <MudText Class="ml-3" Align="Align.Left" Style="color: gray;" Typo="Typo.caption"> 如有疑问，请拨打电话<span style="color:rgba(238, 164, 128, 0.8);">400-6800-315</span>详细咨询</MudText>
            </MudStack>
        </MudPaper>


    <MudPaper Elevation="0" Style="background-color: transparent;color: #e2e1e4">
        <SurveyPrompt Title="溯源信息" />
        @if (traceabilityResult is not null)
        {
            <MudTimeline TimelineOrientation="TimelineOrientation.Vertical" TimelineAlign="TimelineAlign.Start"
                         TimelinePosition="TimelinePosition.Right">
                <MudStack Justify="Justify.FlexStart" Class="ml-3">
                    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Size="Size.Small" Style="Width:100%;">
                        <ItemContent>
                            <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                                <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word; width: 100px;">出库单号:</MudText>
                                <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word;">@traceabilityResult.OrderNumbels</MudText>
                            </MudStack>
                        </ItemContent>
                    </MudTimelineItem>
                    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                        <ItemContent>
                            <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart" Style="Width: 100%">
                                <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word; width: 100px;">出库时间:</MudText>
                                <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word;">@traceabilityResult.OutTime</MudText>
                            </MudStack>
                        </ItemContent>
                        @*  <ItemOpposite>
                            <MudText Color="Color.Warning">14:08</MudText>
                        </ItemOpposite>*@
                    </MudTimelineItem>
                    <MudTimelineItem Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                        <ItemContent>
                            <MudStack Row="true" Spacing="1" Justify="Justify.FlexStart">
                                <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word; width: 100px;">供应代理:</MudText>
                                <MudText Typo="Typo.button" Align="Align.Left" Style="word-wrap: break-word;">@traceabilityResult.AgentName</MudText>
                            </MudStack>
                        </ItemContent>
                    </MudTimelineItem>
                </MudStack>
            </MudTimeline>
        }
        else
        {
            <TraceabilitySkeleton></TraceabilitySkeleton>
        }
    </MudPaper>

@*    <MudPaper>
        

        <MudStack Row="false" Spacing="0" Justify="Justify.FlexStart" Class="mt-18">
            <MudText Style="Color: grey; font-weight: 100" Typo="Typo.caption">Copyright © chn315.top 2023</MudText>
            <MudText Style="Color: grey; font-weight: 100" Typo="Typo.caption">琼ICP备2020003165号 公安备案: 46010502000375号</MudText>
        </MudStack>
    </MudPaper>*@

    <SurveyPrompt Title="联系我们" />
    <footer >
       
        <h4 style="margin-top: 25px;">全省销售热线</h4>
        <ul style="list-style: none; margin: 0; padding: 0;">
            <li style="margin-bottom: 10px;">
                <strong style="font-weight: bold;">海口总仓：</strong>
                海口市秀英区美安大道8号
                <br>
                联系电话：<span>65305288</span>
            </li>
        </ul>
        <h4 style="margin-top: 20px;">区域销售热线</h4>
        <ul style="list-style: none; margin: 0; padding: 0;">
            <li style="margin-bottom: 10px;">
                <strong style="font-weight: bold;">区域范围：</strong>
                定安、文昌、琼海、万宁
                <br>
                联系电话(微信)：<span> 18308989062</span>
            </li>
            <li style="margin-bottom: 10px;">
                <strong style="font-weight: bold;">区域范围：</strong>
                临高、儋州、昌江、白沙、东方
                <br>
                联系电话(微信)：<span>18308989063</span>
            </li>
            <li style="margin-bottom: 10px;">
                <strong style="font-weight: bold;">区域范围：</strong>
                三亚、陵水、保亭、五指山、乐东
                <br>
                联系电话(微信)：<span >18308989065</span>
            </li>
        </ul>
        <p style="color: gray; margin-top: 20px;">&copy; 2023 chn315.top. 版权所有.</p>
    </footer>
    

}


<!-- 遮罩层 -->
<div id="modalOverlay"></div>
<div id="exampleModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header mr-5" style="border: 0px;">
                <MudIconButton Icon="@Icons.Material.Outlined.Close" OnClick="@CloseDialog" Size="Size.Large" Class="close" aria-label="Close">
                   
                </MudIconButton>
            </div>
            @*<div class="modal-body">
                @if (redStatusResult is not null)
                {
                    <div> @redStatusResult.StuteCode</div>
                }
            </div>*@
            <div class="modal-footer justify-content-center mt-auto" style="border: 0px;">
                @*<button type="button" class="btn btn-secondary" data-dismiss="modal">关闭</button>*@
                
                @if (redStatusResult is not null && redStatusResult.StuteCode == "CAPTCHA")
                {
                    <MudTextField AdornmentColor="Color.Dark" FullWidth="false" Style="background-color: rgba(255,255,255,0.7);color: #50586C" Label="输入验证码领红包" @bind-Value="@captcha" Variant="Variant.Filled"></MudTextField>
                }

                <MudFab Class="keyframesbtn my-3" ButtonType="ButtonType.Button" Label="点击领取" Style="Color:black; background-color: darkkhaki; border: none" OnClick="@SubmitForm">领</MudFab>
            </div>
        </div>
    </div>
</div>

@code
{


    [Parameter]
    public string? Id { set; get; }


    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string? Code { get; set; }


    [Parameter]
    [SupplyParameterFromQuery(Name = "state")]
    public string? QRCode { get; set; }


    private AntiFakeResult antiFakeResult;
    private TraceabilityResult traceabilityResult;

    private string captcha;

    /// <summary>
    /// 抽奖结果
    /// </summary>
    private LotteryResult lotteryResult;

    /// <summary>
    /// 抽奖活动信息
    /// </summary>
    private LotteryActivity lotteryActivity;

    /// <summary>
    /// 当前用户与标签的领取红包的状态
    /// </summary>
    private RedStatusResult redStatusResult;

    /// <summary>
    /// 领取红包的结果
    /// </summary>
    private RedPacketResult redPacketResult;



    DialogParameters parameters = new ();
    JsonSerializerOptions options = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true
    };
    public string? OpenId { set; get; }

    protected override async Task OnInitializedAsync()
    {

        //if (string.IsNullOrEmpty(Code))
        //{
        //    var p = await RegexMatch(_navigationManager.Uri);
        //    var getoauthurl = $"OAuth2Url?qrcode={p}";
        //    HttpResponseMessage response = await _httpClient.GetAsync(getoauthurl);//请求返回微信授权访问地址
        //    if (response.IsSuccessStatusCode)
        //    {
        //        string content = await response.Content.ReadAsStringAsync();

        //        _navigationManager.NavigateTo(content);
        //        return;
        //    }
        //    else
        //    {

        //    }
        //}

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

          //  QRCode = "143890836071";
            OpenId = "oz0TXwTew5RmbnTa2aeMPfHfsDnY";
            QRCode = "143890836071";
            if (!string.IsNullOrEmpty(QRCode))
            {

                OpenId = "oz0TXwTew5RmbnTa2aeMPfHfsDnY";
               // OpenId = await GetWeixinUserOpenID(Code);
                antiFakeResult = await GetAntiFakeResultAsync(QRCode);
                traceabilityResult = await GetTraceabilityResultAsync(QRCode);
                lotteryActivity    = await GetLotteryActivityAsync();

                if (!string.IsNullOrEmpty(OpenId))
                {
                    redStatusResult = await GetRedStatusResultAsync(OpenId, QRCode);

                    if (redStatusResult.IsSuccess)
                    {
                        await OpenDialog();
                    }
                }
                StateHasChanged();
            }
        }
    }

    private async Task<string> GetWeixinUserOpenID(string code)
    {

        try
        {
            if (!string.IsNullOrEmpty(code))
            {
                return  await _httpClient.GetStringAsync($"OAuth2/WXLogin?code={code}");
            }
        }
        catch (Exception e)
        {
            _logger.LogError($"微信获取openid异常：{e.Message}");
            throw;
        }

        return "";
    }

    private async Task<AntiFakeResult> GetAntiFakeResultAsync(string qrcode)
    {
        try
        {

            var response = await _httpClient.GetAsync($"ScanByQRCode/AntiFake?qrcode={qrcode}");
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<AntiFakeResult>(stream, options);
            }

            _logger.LogError($"查询防伪信息失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            _logger.LogError($"查询防伪信息异常：{e.Message}");
        }

        return new AntiFakeResult();
    }

    private async Task<TraceabilityResult> GetTraceabilityResultAsync(string qrcode)
    {
        try
        {
            var response = await _httpClient.GetAsync($"ScanByQRCode/Traceability?qrcode={qrcode}");

            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<TraceabilityResult>(stream, options);
            }

            _logger.LogError($"查询防伪信息失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            _logger.LogError($"查询溯源信息异常：{e.Message}");
        }
        return new TraceabilityResult();
    }

    private async Task<RedStatusResult> GetRedStatusResultAsync(string openid , string qrcode)
    {
        try
        {
            var url = $"RedPacket/RedPackStatus?openid={openid}&qrcode={qrcode}";
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<RedStatusResult>(stream, options);
            }

            _logger.LogError($"查询防伪信息失败：{response.StatusCode}");


        }
        catch (Exception e)
        {
            _logger.LogError($"查询领取现金红包异常：{e.Message}");
        }
        return null;
    }

    private async Task<RedPacketResult> GetRedPacketResultQRCodeAsync(string openid, string qrcode)
    {
        try
        {
            openid = "oz0TXwTew5RmbnTa2aeMPfHfsDnY";
            qrcode = "143890836071";
            var url = $"RedPacket/QRCode?openid={openid}&qrcode={qrcode}";

            //parameters.Add("Msg", $"请求url：{url}");
            //await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
            //发起post 请求
            


            var response =  await _httpClient.PostAsync(url, null);// _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
    //parameters.Add("Msg", $"请求url成功：{stream}");
                //await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
                return JsonSerializer.Deserialize<RedPacketResult>(stream, options);
            }

            _logger.LogError($"二维码领取现金红包失败：{response.StatusCode}");


        }
        catch (Exception e)
        {
            parameters.Add("Msg", $"ResultQRCodeAsync异常：{e.Message}");
            await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
            _logger.LogError($"二维码领取现金红包异常：{e.Message}");
        }
        return null;
    }

    private async Task<RedPacketResult> GetRedPacketResultCaptchaAsync(string openid, string qrcode, string captcha)
    {
        try
        {
            var url = $"RedPacket/Captcha?openid={openid}&qrcode={qrcode}&captcha={captcha}";
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<RedPacketResult>(stream, options);
            }

            _logger.LogError($"验证码领取现金红包失败：{response.StatusCode}");


        }
        catch (Exception e)
        {
            _logger.LogError($"验证码领取现金红包异常：{e.Message}");
        }
        return null;
    }

    private async Task<LotteryActivity> GetLotteryActivityAsync()
    {
        try
        {
            var url = $"LotteryActivity";
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<LotteryActivity>(stream, options);
            }

            _logger.LogError($"获取抽奖活动信息失败：{response.StatusCode}");


        }
        catch (Exception e)
        {
            _logger.LogError($"获取抽奖活动信息异常：{e.Message}");
        }
        return null;
    }

    private async Task<LotteryResult> LuckyDraw(string openid, string qrcode, string prizennumber)
    {
        try
        {
            var url = $"Lottery?qrcode={qrcode}&openid={openid}&prizennumber={prizennumber}";
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var stream = await response.Content.ReadAsStringAsync();
                return JsonSerializer.Deserialize<LotteryResult>(stream, options);
            }

            _logger.LogError($"获取抽奖活动信息失败：{response.StatusCode}");


        }
        catch (Exception e)
        {
            _logger.LogError($"获取抽奖活动信息异常：{e.Message}");
        }
        return null;
    }



    //private async Task<string> RegexMatch(string args)
    //{
    //// string input = "http://www.chn315.top/236810001404";
    //    string pattern = @"/(\d{12})$"; // 匹配网址末尾12位数字
    //    Match match = Regex.Match(args, pattern);
    //    if (match.Success)
    //    {
    //        return match.Groups[1].Value;
    ////Console.WriteLine(result); // 输出：236810001404
    //    }
    //    return DateTime.Now.ToString("yyyyMMddhhmmss");
    //}


    private async Task OpenDialog()
    {

        await JsRuntime.InvokeVoidAsync("openDialog");
      //  _dialogIsOpen = true;
      //  StateHasChanged();
    }

    private async Task CloseDialog()
    {
        //关闭对话框
        await JsRuntime.InvokeVoidAsync("closeDialog");
        StateHasChanged();
    }

    private async Task SubmitForm()
    {
        // 点击领取红包

        //var parameters = new DialogParameters();
        parameters.Add("Msg", $"OpenId：{OpenId}   QRCode：{QRCode}");
        try
        {

            redPacketResult = await GetRedPacketResultQRCodeAsync(OpenId, QRCode);

            if (redPacketResult.IsSuccess)
            {
                //parameters.Add("Msg", $"redPacketResult：{redPacketResult.IsSuccess}");
                //await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);

                await JsRuntime.InvokeVoidAsync("closeDialog");
            }
            else
            {
                parameters.Add("Msg", $"redPacketResult：{redPacketResult.Message}");
                await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
            }
            //var resulDt = await  _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
            //var result = await resulDt.Result;
            //if (!result.Canceled)
            //{
                


            //}

            
           // _logger.LogError($"获取抽奖活动信息失败：{response.StatusCode}");
        }
        catch (Exception e)
        {
            //parameters.Add("Msg", $"异常：{e.StackTrace}");
            //await _dialogService.ShowAsync<DeBugDialog>("DeBugDialog", parameters);
           _logger.LogError(e.Message);
        }
       // await JsRuntime.InvokeVoidAsync("closeDialog");
        StateHasChanged();
    }
}
